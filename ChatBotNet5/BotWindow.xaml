<Window x:Class="ChatBot_Net5.BotWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:BotIOController ="clr-namespace:ChatBot_Net5.BotIOController"
        xmlns:s="clr-namespace:ChatBot_Net5.Properties"
        mc:Ignorable="d"
        Title="Chat Bot Manager" Height="771" Width="1000" Closing="OnWindowClosing" SnapsToDevicePixels="True" Loaded="Window_Loaded" UseLayoutRounding="True">
    <Window.Resources>
        <BotIOController:BotController x:Name="ControlBot" x:Key="ControlBot" />
    </Window.Resources>
    <DockPanel SnapsToDevicePixels="True" DataContext="{DynamicResource ControlBot}">
        <StatusBar Height="25" DockPanel.Dock="Bottom" />
        <TabControl>
            <TabItem Header="Bot Setup">
                <TabControl>
                    <TabItem Header="Twitch">
                        <DockPanel LastChildFill="False" Name="DockPanel_BotSetup_Twitch">
                            <StackPanel DockPanel.Dock="Left"  DataContext="{Binding Source={x:Static s:Settings.Default}, Mode=OneWay}">
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Label Content="Channel Name" Width="110" />
                                    <TextBox x:Name="TB_Twitch_Channel" Text="{Binding TwitchChannelName}" Width="250" LostFocus="Settings_LostFocus" SourceUpdated="TextBox_SourceUpdated" />
                                </StackPanel>
                                <TextBlock Width="300" Text="* Currently, this Chat Bot only supports communicating to one channel through the Channel Name." TextWrapping="Wrap" FontSize="8" FontStretch="SemiCondensed" />
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Label Content="Bot User Name" Width="110" />
                                    <TextBox x:Name="TB_Twitch_BotUser" Text="{Binding TwitchBotUserName, Mode=TwoWay}" Width="250" LostFocus="Settings_LostFocus" SourceUpdated="TextBox_SourceUpdated" />
                                </StackPanel>
                                        <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                            <Button x:Name="Btn_Twitch_RefreshDate" Content="Refresh Due Date" Width="110" ToolTip="Click this button to set a 60 day due date from today, to show when the 'access token' needs refreshed." Click="Button_Click" LostFocus="Settings_LostFocus" />
                                            <Label Name="Twitch_RefreshDate" Content="{Binding TwitchRefreshDate, FallbackValue=1/1/1900, Mode=TwoWay, StringFormat=MM/dd/yyyy}" Width="200" />
                                        </StackPanel>
                                
                                <Expander Name="Expander_Credentials" Header="Credential (Click me)" ExpandDirection="Down" IsExpanded="False">
                                    <StackPanel>
                                        <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                            <Label Content="Client Id" Width="110" />
                                            <TextBox x:Name="TB_Twitch_ClientID" Text="{Binding TwitchClientID, Mode=TwoWay}" Width="250" ToolTip="The client ID for the bot user account."  LostFocus="Settings_LostFocus" SourceUpdated="TextBox_SourceUpdated" InputScope="Password" />
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                            <Label Content="Access Token" Width="110" />
                                            <TextBox x:Name="TB_Twitch_AccessToken" Text="{Binding TwitchAccessToken, Mode=TwoWay}" Width="250" LostFocus="Settings_LostFocus" SourceUpdated="TextBox_SourceUpdated" InputScope="Password" />
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                            <Label Content="Refresh Token" Width="110" />
                                            <TextBox x:Name="TB_Twitch_RefreshToken" Text="{Binding TwitchRefreshToken, Mode=TwoWay}" Width="250" LostFocus="Settings_LostFocus" />
                                        </StackPanel>
                                        
                                    </StackPanel>
                                </Expander>
                                <StackPanel>
                                    <GroupBox Header="Setup Follower Operations">
                                        <StackPanel>
                                            <StackPanel Orientation="Horizontal">
                                                <Label Content="Seconds between checking for new follows: " />
                                                <Label Content="{Binding Value, ElementName=Slider_TimeFollowerPollSeconds}" />
                                            </StackPanel>

                                            <Slider x:Name="Slider_TimeFollowerPollSeconds" Height="40" Width="300" AutoToolTipPlacement="TopLeft" Interval="1" TickPlacement="Both" ToolTip="Choose how often, in seconds, to check for new followers, and change in channel state: going live, updated stream, and going offline. Smaller values increases traffic to your channel." Value="{Binding TwitchFrequency, Mode=TwoWay}" Maximum="600" Minimum="5" SmallChange="1" SelectionStart="5" SelectionEnd="600" Margin="10,0" IsSnapToTickEnabled="True" LostFocus="Settings_LostFocus" />
                                            <CheckBox IsChecked="{Binding AddFollowersStart, Mode=TwoWay}" LostFocus="Settings_LostFocus" ToolTip="Will also re-perform when clicking 'Stop Bot' then 'Start Bot'.">
                                                <TextBlock Padding="5" TextWrapping="Wrap">Enable adding all followers when bot starts, i.e. click 'Start Bot'.</TextBlock>
                                            </CheckBox>
                                        </StackPanel>
                                    </GroupBox>

                                    <GroupBox Header="Setup Go-Live Notifications">
                                        <StackPanel>
                                            <CheckBox IsChecked="{Binding PostMultiLive, Mode=OneWay}" Content="Enable posting to social media (e.g. Discord) multiple live messages in same day." />
                                            <StackPanel Orientation="Horizontal">
                                                <Label Content="Seconds between checking for going live: " />
                                                <Label Content="{Binding Value, ElementName=Slider_TimeGoLivePollSeconds}" />
                                            </StackPanel>
                                            <Slider x:Name="Slider_TimeGoLivePollSeconds" Height="40" Width="300" AutoToolTipPlacement="TopLeft" Interval="1" TickPlacement="Both" ToolTip="Choose how often, in seconds, to check for a change in channel state: going live, updated stream, and going offline. Smaller values increases traffic to your channel." Value="{Binding TwitchGoLiveFrequency, Mode=TwoWay}" Maximum="3600" Minimum="5" SmallChange="5" SelectionStart="5" SelectionEnd="3600" Margin="10,0" IsSnapToTickEnabled="True" LostFocus="Settings_LostFocus" />
                                        </StackPanel>
                                    </GroupBox>

                                    
                                </StackPanel>
                                <GroupBox x:Name="BC_T_groupBox" Header="Bot Processing" Margin="0,10,0,0" Height="100" Width="150" BorderBrush="#FF212D34" DataContext="{DynamicResource ControlBot}">
                                    <StackPanel Orientation="Vertical">
                                        <RadioButton x:Name="Radio_Twitch_StartBot" Content="Start Bot" Margin="10,10,0,5" PreviewMouseDown="BC_Twitch_StartBot" IsEnabled="False"  />
                                        <RadioButton x:Name="Radio_Twitch_StopBot" Content="Stop Bot" Margin="10,10,0,5" PreviewMouseDown="BC_Twitch_StopBot" IsChecked="True" IsEnabled="False" />
                                    </StackPanel>
                                </GroupBox>
                            </StackPanel>
                            <FlowDocumentScrollViewer DockPanel.Dock="Right" Margin="10" VerticalScrollBarVisibility="Auto">
                                <FlowDocument FontSize="12" PagePadding="5">
                                    <Section>
                                        <Paragraph>
                                            *The 'Credentials' are in the expander to the left for privacy when the bot starts. Click to expand to enter and view the credentials. The data is saved after the textbox, slider, or checkbox loses focus.
                                            <LineBreak/>
                                            <LineBreak/>
                                            The settings are saved at:
                                            <Italic>C:\Users\{username}\AppData\Local\ChatBot</Italic>
                                        </Paragraph>
                                        <Section Padding="15,0,15,0">
                                            <Paragraph>
                                                Be sure to update the application into the same folder to keep the settings maintained between versions. If you do need to move the application or if installed into another folder and you want to move the settings already saved to the application, run the application to establish a new folder with settings at the above path and look at the folder timestamps. The last part of the folder name, all the jumbled letters, is a hash code based on the application's folder path.
                                            </Paragraph>
                                            <Table>
                                                <TableRowGroup>
                                                    <TableRow>
                                                        <TableCell BorderBrush="Black" BorderThickness="1" Padding="2">
                                                            <Paragraph>To update the settings:</Paragraph>
                                                        </TableCell>
                                                        <TableCell BorderBrush="Black" BorderThickness="1" Padding="2">
                                                            <Paragraph>To move the settings files:</Paragraph>
                                                        </TableCell>
                                                    </TableRow>
                                                    <TableRow>
                                                        <TableCell BorderBrush="Black" BorderThickness="1" Padding="2">
                                                            <Paragraph>Open the prior application settings 'user.config' file and paste each of the values into the left credentials box.</Paragraph>
                                                        </TableCell>
                                                        <TableCell BorderBrush="Black" BorderThickness="1" Padding="2">
                                                            <Paragraph>Close the application, open the previous settings folder and latest version number, copy the 'user.config' file. Paste the 'user.config' file to the newer application settings folder and the version number.</Paragraph>
                                                        </TableCell>
                                                    </TableRow>
                                                </TableRowGroup>
                                            </Table>
                                        </Section>
                                        <Paragraph>
                                            Bots need an "Access Token" to authorize it to post to Twitch. Per the OAuth requirements, the "Access Token" must be paired with the "Client Id" used to generate the "Access Token".
                                            <LineBreak />
                                            <LineBreak />
                                            *Until this application supports creating and refreshing access tokens, the user will need to manually perform this task.
                                        </Paragraph>
                                    </Section>
                                    <Section>
                                        <List>
                                            <ListItem>
                                                <Paragraph>Get the bot account to use within this chat bot.
                                                    <LineBreak/> *The recommendation is to create a separate Twitch account for this bot to use.
                                                </Paragraph>
                                            </ListItem>
                                            <ListItem>
                                                <Paragraph>Visit:
                                                    <Hyperlink NavigateUri="https://dev.twitch.tv/console" RequestNavigate="Hyperlink_RequestNavigate" >https://dev.twitch.tv/console</Hyperlink> and "Register Your Application" under the account the bot will use.
                                                    <LineBreak/> *Note, the Twitch account needs 2-factor authentication set-up to register applications.*
                                                </Paragraph>
                                                <List>
                                                    <ListItem>
                                                        <Paragraph>Give the application a name (it's just a reference when you look at the listing).</Paragraph>
                                                    </ListItem>
                                                    <ListItem>
                                                        <Paragraph>Add:
                                                            <LineBreak />
                                                            <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" PreviewMouseLeftButtonUp="PreviewMoustLeftButton_SelectAll" PreviewMouseLeftButtonDown="PreviewMoustLeftButton_SelectAll">https://twitchapps.com/tokengen/</TextBox>
                                                            <LineBreak /> as the OAuth Redirect URLs. Select "Chat Bot" category (or add the token generator website you're using to generate tokens).
                                                        </Paragraph>
                                                    </ListItem>
                                                    <ListItem>
                                                        <Paragraph>Complete the reCaptcha and click 'Create'.</Paragraph>
                                                    </ListItem>
                                                    <ListItem>
                                                        <Paragraph>View the application entry to get the 'Client Id'. You can save it in your files and add to the left credential box.</Paragraph>
                                                    </ListItem>
                                                </List>
                                            </ListItem>
                                            <ListItem>
                                                <Paragraph>One such site to generate the access tokens is at:
                                                    <LineBreak />
                                                    <Hyperlink NavigateUri="https://twitchapps.com/tokengen/" RequestNavigate="Hyperlink_RequestNavigate" >https://twitchapps.com/tokengen/</Hyperlink>
                                                </Paragraph>
                                                <List>
                                                    <ListItem>
                                                        <Paragraph>Paste the 'Client Id' from .</Paragraph>
                                                    </ListItem>
                                                    <ListItem>
                                                        <Paragraph>For "Scopes", paste exactly
                                                            <LineBreak />
                                                            <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" TextWrapping="Wrap" PreviewMouseLeftButtonUp="PreviewMoustLeftButton_SelectAll" PreviewMouseLeftButtonDown="PreviewMoustLeftButton_SelectAll">bits:read chat:read chat:edit channel:moderate user:read:broadcast user:edit:follows</TextBox>
                                                            <LineBreak /> *This permits specific access for the app functions. Please add these scopes. Currently, the app doesn't adjust to what user scopes you've selected if you don't want specific features enabled.
                                                        </Paragraph>
                                                    </ListItem>
                                                    <ListItem>
                                                        <Paragraph>Click 'Connect' and copy the resulting "Access Token". You can save it to your local files and paste it to the left credential box.</Paragraph>
                                                    </ListItem>
                                                    <ListItem>
                                                        <Paragraph>Be sure to click "Refresh Date" here in the credentials which will give you the 60-day date from now in which you need to refresh the 'access token'. You would only need to perform step 3 for a new 'access token'.</Paragraph>
                                                    </ListItem>
                                                </List>
                                            </ListItem>
                                            <ListItem>
                                                <Paragraph>View the other tabs to setup your bot messages to events and commands.
                                                    <LineBreak/>
                                                    <LineBreak/>
                                                    <LineBreak/>
                                                    <LineBreak/>
                                                </Paragraph>
                                            </ListItem>
                                        </List>
                                    </Section>
                                </FlowDocument>
                            </FlowDocumentScrollViewer>
                        </DockPanel>
                    </TabItem>
                    <TabItem Header="Discord" DataContext="{Binding DataManage}">
                        <StackPanel>
                            <TextBlock IsEnabled="False">Add Webhook links, one per line. Bot will report notifications to each Webhook. *The incorrect 'Kind' will prevent the notification.<LineBreak />
                              Current implemented <LineBreak /> 'Kind':
                            </TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <ListView ItemsSource="{Binding KindsWebhooks, Mode=OneWay}" SelectionMode="Single"  />
                                <DataGrid Name="DG_Webhooks" Height="200" Margin="10,0" AutoGenerateColumns="True" d:LayoutOverrides="LeftMargin, RightMargin" ItemsSource="{Binding Discord, Mode=OneWay}"/>
                            </StackPanel>
                        </StackPanel>
                    </TabItem>
                    <TabItem Header="Bot Status Log">
                        <GroupBox Header="Bot Status Log" BorderBrush="Black" Margin="2,2,2,2">
                            <TextBox x:Name="TextBlock_TwitchBotLog" DataContext="{Binding TwitchIO}" Text="{Binding StatusLog, Mode=OneWay}" TextWrapping="Wrap" Background="#FFEEEEEE" ScrollViewer.VerticalScrollBarVisibility="Auto" IsReadOnly="True" VerticalScrollBarVisibility="Visible" IsInactiveSelectionHighlightEnabled="True" TextChanged="TextBlock_TwitchBotLog_TextChanged" />
                        </GroupBox>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Data &amp; Messages">
                <TabControl x:Name="TabControl_DataTabs">
                    <TabItem Header="Users" Name="TabItem_Users">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="25" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <!--<Label Content="This tab is disabled while the bot is started. Stop the bot to access this tab." Grid.Row="0" />-->
                            <DataGrid x:Name="DG_Users" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Users, Mode=OneWay}" AutoGenerateColumns="True" AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" CanUserAddRows="False" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" Grid.Row="1" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Followers" Name="TabItem_Followers">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="25" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <!--<Label Content="This tab is disabled while the bot is started. Stop the bot to access this tab." Grid.Row="0" />-->
                            <DataGrid x:Name="DG_Followers" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Followers, Mode=OneWay}" AutoGenerateColumns="True"  AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" Grid.Row="1" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Variable Options">
                        <ListView DockPanel.Dock="Right" ItemsSource="{Binding CommandInfo.Collection}" >
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn DisplayMemberBinding="{Binding Parameter}" Header="Parameter" />
                                    <GridViewColumn DisplayMemberBinding="{Binding Value}" Header="Value"/>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </TabItem>
                    <TabItem Header="System Events">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="55" />
                                <RowDefinition Height="100*" />
                            </Grid.RowDefinitions>
                            <TextBlock TextWrapping="Wrap" Grid.Row="0">Double-click the MsgStr for your custom message. Use the 'Commands' to customize to a name or relevant values.<LineBreak/>
                                'Live' is a message to Discord/other services.</TextBlock>
                            <DataGrid x:Name="DG_CommonMsgs" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding ChannelEvents, Mode=OneWay}"  AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" DockPanel.Dock="Bottom" CanUserAddRows="False" CanUserDeleteRows="False" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" Grid.Row="1">
                                <DataGrid.ToolTip>
                                    <TextBlock TextWrapping="Wrap" Width="500">The name column is readonly. These are for channel events the bot recognizes and responds with the specified message. 
                                    <LineBreak /><LineBreak />         
                                    You can edit the message to customize a response fitting your channel!
                                    <LineBreak />
                                    Please see the parameters to the right to use in each message, not all will be applicable. Ensure a space before  the parameter, e.g. "the #user followed", the " #" needs to be the first character in the word.
                                    </TextBlock>
                                </DataGrid.ToolTip>
                            </DataGrid>
                        </Grid>
                    </TabItem>
                    <TabItem Header="Currency Types">
                        <Grid>
                            <DataGrid Name="DG_Currency" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding CurrencyType, Mode=OneWay}" AutoGenerateColumns="True" AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Currency" Name="TabItem_CurrencyAccrual">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="25" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <!--<Label Content="This tab is disabled while the bot is started. Stop the bot to access this tab." Grid.Row="0" />-->
                            <DataGrid Name="DG_CurrencyAccrual" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Currency, Mode=OneWay}" AutoGenerateColumns="True" AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" Grid.Row="1" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Command System">
                        <TabControl>
                            <TabItem Header="Options">
                                <StackPanel Margin="10"  DataContext="{Binding Source={x:Static s:Settings.Default}, Mode=OneWay}">
                                    <CheckBox IsChecked="{Binding BotConnectionMsg, Mode=TwoWay}" LostFocus="Settings_LostFocus">
                                        <TextBlock Padding="5" TextWrapping="Wrap">Enable chat message when bot connects to a channel.</TextBlock>
                                    </CheckBox>
                                    <CheckBox IsChecked="{Binding InsertMeToMsg, Mode=TwoWay}" LostFocus="Settings_LostFocus">
                                        <TextBlock Padding="5" TextWrapping="Wrap">Enable /me for bot messages.</TextBlock>
                                    </CheckBox>
                                    <CheckBox IsChecked="{Binding WelcomeChatMsg, Mode=TwoWay}" LostFocus="Settings_LostFocus">
                                        <TextBlock Padding="5" TextWrapping="Wrap">Enable welcome message to users joining the channel. Only appears on first login.</TextBlock>
                                    </CheckBox>
                                    <CheckBox IsChecked="{Binding AutoShout, Mode=TwoWay}" LostFocus="Settings_LostFocus">
                                        <TextBlock Padding="5" TextWrapping="Wrap">Auto shoutout users when they first appear in your live stream. Add names to "Auto SO" tab.</TextBlock>
                                    </CheckBox>
                                    <CheckBox IsChecked="{Binding RepeatTimerCommands, Mode=TwoWay}" LostFocus="Settings_LostFocus">
                                        <TextBlock Padding="5" TextWrapping="Wrap">Enable repeating commands based on the seconds timer. Add 'seconds' (whole number, e.g. 600) to the repeat timer column within the command list. Timer updates after the command runs.</TextBlock>
                                    </CheckBox>
                                </StackPanel>
                            </TabItem>
                            <TabItem Header="Help">
                                <Grid>
                                    <TextBlock>
                                        The 'BuiltInCommands' are those established within the bot. <LineBreak />
                                        The 'socials' (specific services): add your custom message for the social media and your access URL. E.g. "Visit me on Twitter at: http://wwww.twitter.com/myuser". The command will show all socials except messages that are blank or the default 'Social media url here'.
                                        <LineBreak />
                                        <LineBreak />
                                        The variables within message to format a custom response:<LineBreak />
                                        #user: the user specific to the command; either 'command invoker' user or parameter to the command<LineBreak />
                                        #url: the Twitch URL with the supplied user attached - specific to 'so == shoutout' command<LineBreak />
                                        #fieldvalue: placeholder for the value from a table lookup<LineBreak />
                                        #currencyname: placeholder for the currency name - extracted from table<LineBreak />
                                        #currencyvalue: the value of a currency<LineBreak />
                                    </TextBlock>
                                </Grid>
                            </TabItem>
                            <TabItem Header="Built-In Commands">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="50" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Row="0" TextWrapping="Wrap" Text="To use command repeat timers, set option in 'Option' tab and set the seconds within the command row. This repeat doesn't work with those commands requiring parameters. The '!socials', for example, is an ideal repeat command."/>
                                    <DataGrid Grid.Row="1" x:Name="DG_BuiltInCommands" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding BuiltInCommands, Mode=OneWay}" AutoGenerateColumns="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" CanUserDeleteRows="False" CanUserAddRows="False" />
                                </Grid>
                            </TabItem>
                            <TabItem Header="Commands">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="50" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <TextBlock Grid.Row="0" TextWrapping="Wrap" Text="To use command repeat timers, set option in 'Option' tab and set the seconds within the command row. This repeat doesn't work with those commands requiring parameters. The '!socials', for example, is an ideal repeat command."/>
                                    <DataGrid Grid.Row="1" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Commands, Mode=OneWay}" AutoGenerateColumns="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                                </Grid>
                            </TabItem>
                            <TabItem Header="Auto-SO">
                                <Grid>
                                    <DataGrid IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding ShoutOuts, Mode=OneWay}" AutoGenerateColumns="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                                </Grid>
                            </TabItem>
                        </TabControl>
                    </TabItem>
                    <TabItem Header="Stream Stats">
                        <Grid>
                            <DataGrid IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding StreamStats, Mode=OneWay}" AutoGenerateColumns="True" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Bot Chat">
                <DockPanel>
                    <DockPanel LastChildFill="True" DockPanel.Dock="Right" >
                        <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom" Margin="5" HorizontalAlignment="Center">
                            <Button Padding="10,4" Margin="10" Content="Pop-Out Chat Box" Click="PopOutChatButton_Click" />
                            <GroupBox Header="Pop-out Opacity" Margin="5,0">
                                <Slider x:Name="Slider_PopOut_Opacity" Width="150" TickPlacement="Both" IsSnapToTickEnabled="True" />
                            </GroupBox>
                        </StackPanel>
                        <StackPanel>
                            <Label Content="Join List" HorizontalContentAlignment="Center" />

                            <ListView x:Name="LV_JoinList" DataContext="{Binding ProcessCommands}"          
                            ItemsSource="{Binding JoinCollection, Mode=TwoWay}" >
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn DisplayMemberBinding="{Binding Path=Remove}">
                                            <GridViewColumn.Header>
                                                <TextBlock Text="Remove" ToolTip="The user to remove out of the list. Bot checks regularly." />
                                            </GridViewColumn.Header>
                                        </GridViewColumn>
                                        <GridViewColumn Header="GameTag UserName" DisplayMemberBinding="{Binding Path=GameUserName}" />
                                        <GridViewColumn Header="Chat User" DisplayMemberBinding="{Binding Path=ChatUser}" />
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </StackPanel>
                    </DockPanel>
                    <DockPanel LastChildFill="True" DockPanel.Dock="Left" Width="448" Background="#FF2B2929" >
                        <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom" HorizontalAlignment="Right" Margin="0,4,15,4">
                            <TextBox Width="365" />
                            <Button Content="Send" Margin="10,0,0,0" Padding="8,2" />
                        </StackPanel>

                        <FlowDocumentScrollViewer DockPanel.Dock="Top" BorderThickness="1,1,1,1" x:Name="FlowDoc_ChatBox" ScrollViewer.CanContentScroll="True" DataContext="{Binding ChatData, Mode=OneWay}" Document="{Binding}" Foreground="#FFC5C3C3" />
                    </DockPanel>
                </DockPanel>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>
