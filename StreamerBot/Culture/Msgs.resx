<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="addcommand" xml:space="preserve">
    <value>addcommand</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="autohost" xml:space="preserve">
    <value>auto-hosting</value>
    <comment>MsgVar variable value</comment>
  </data>
  <data name="bot" xml:space="preserve">
    <value>bot</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="commands" xml:space="preserve">
    <value>commands</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="dequeue" xml:space="preserve">
    <value>dequeue</value>
    <comment>leave the player queue</comment>
  </data>
  <data name="editcommand" xml:space="preserve">
    <value>editcommand</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="enqueue" xml:space="preserve">
    <value>enqueue</value>
    <comment>join the player queue</comment>
  </data>
  <data name="everyone" xml:space="preserve">
    <value>@everyone</value>
    <comment>Discord tag for informing 'everyone' in a server</comment>
  </data>
  <data name="ExceptionArgument" xml:space="preserve">
    <value>The supplied value {0} is not included within the acceptable list: {1}</value>
  </data>
  <data name="ExceptionInvalidCommand" xml:space="preserve">
    <value>No permission to invoke this command.</value>
  </data>
  <data name="ExceptionInvalidComUsage" xml:space="preserve">
    <value>The command {0} is configured for {1}, but can only perform {2}</value>
    <comment>keep the {0}, {1}, {2} - it's for the string format</comment>
  </data>
  <data name="ExceptionInvalidOpCommand" xml:space="preserve">
    <value>Command not found.</value>
  </data>
  <data name="ExceptionInvalidOperationField" xml:space="preserve">
    <value>Field not specified.</value>
  </data>
  <data name="ExceptionInvalidOperationTable" xml:space="preserve">
    <value>Table not specified.</value>
  </data>
  <data name="ExceptionKeyNotFound" xml:space="preserve">
    <value>Command not found.</value>
  </data>
  <data name="followage" xml:space="preserve">
    <value>followage</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="Helpautohost" xml:space="preserve">
    <value>permits distinguishing if the channel is hosted or autohosted</value>
    <comment>describes variable used within message</comment>
  </data>
  <data name="HelpBeingHosted" xml:space="preserve">
    <value>The message displayed when a user hosts the channel. Currently only supported when the bot's user name is the same as the streamer's user name.</value>
  </data>
  <data name="HelpBits" xml:space="preserve">
    <value>The thank you message when a user donates bits to the channel.</value>
  </data>
  <data name="Helpcategory" xml:space="preserve">
    <value>current category, can be used for current channel or referencing a viewer (as command parameter)</value>
  </data>
  <data name="Helpcom" xml:space="preserve">
    <value>The parameter command used within the 'usage' command</value>
  </data>
  <data name="HelpCommunitySubs" xml:space="preserve">
    <value>Thank you message for someone gifting subscription(s) to the channel</value>
  </data>
  <data name="Helpcount" xml:space="preserve">
    <value>the number of donated subscriptions with tier plan: e.g. 5 Tier 1 Subscriptions</value>
  </data>
  <data name="Helpdate" xml:space="preserve">
    <value>Gets the current date in your timezone</value>
  </data>
  <data name="Helpeveryone" xml:space="preserve">
    <value>When included, will replace '#everyone' with either (true) '@everyone' or (false) '&lt;blank&gt;' depending on whether the 'AddEveryone' is checked (true) or unchecked (false) alongside the Discord Server link.</value>
    <comment>Add help info for the 'everyone' message variable.</comment>
  </data>
  <data name="HelpFollow" xml:space="preserve">
    <value>Welcome message for new follower to the channel</value>
  </data>
  <data name="HelpGiftSub" xml:space="preserve">
    <value>Thank you message for someone gifting subscription(s) to a user</value>
  </data>
  <data name="HelpJoinChannel" xml:space="preserve">
    <value>Currently not used.</value>
  </data>
  <data name="HelpLeaveChannel" xml:space="preserve">
    <value>Currently not used.</value>
  </data>
  <data name="HelpLive" xml:space="preserve">
    <value>The message to send out to social media when the channel goes live.</value>
  </data>
  <data name="Helpmonths" xml:space="preserve">
    <value>how many months subscribed this time</value>
  </data>
  <data name="Helpquery" xml:space="preserve">
    <value>The results of the command query will go here.</value>
  </data>
  <data name="HelpRaid" xml:space="preserve">
    <value>The welcome and thank you message when a user raids the channel</value>
  </data>
  <data name="HelpRandom" xml:space="preserve">
    <value>Currently not used.</value>
  </data>
  <data name="Helpreceiveuser" xml:space="preserve">
    <value>the user who received the gifted subscription</value>
  </data>
  <data name="HelpRespond" xml:space="preserve">
    <value>Currently not used.</value>
  </data>
  <data name="HelpResubscribe" xml:space="preserve">
    <value>The thank you message when a user resubscribes to the channel.</value>
  </data>
  <data name="HelpReturnUserJoined" xml:space="preserve">
    <value>Message to provide when a user/viewer is returning to the stream.</value>
  </data>
  <data name="Helpstreak" xml:space="preserve">
    <value>current sub streak months, depends on user preference to share</value>
  </data>
  <data name="Helpsubmonths" xml:space="preserve">
    <value>how many overall months subscribed</value>
  </data>
  <data name="Helpsubplan" xml:space="preserve">
    <value>the subscription plan</value>
  </data>
  <data name="Helpsubplanname" xml:space="preserve">
    <value>the subscription plan name</value>
  </data>
  <data name="HelpSubscribe" xml:space="preserve">
    <value>The thank you message when a user subscribes to the channel.</value>
  </data>
  <data name="HelpSupporterJoined" xml:space="preserve">
    <value>Message to provide when user/viewer is a follower to the stream and supporting the channel.</value>
  </data>
  <data name="Helptime" xml:space="preserve">
    <value>Gets the current time in your timezone</value>
  </data>
  <data name="Helptitle" xml:space="preserve">
    <value>current live stream title</value>
  </data>
  <data name="HelpTwineBotInfo" xml:space="preserve">
    <value>The specific detailed message the bot chats upon joining the channel.</value>
  </data>
  <data name="Helpurl" xml:space="preserve">
    <value>Specify user's name, will add Twitch's URL prefix</value>
  </data>
  <data name="Helpuser" xml:space="preserve">
    <value>display name of the user sending action</value>
  </data>
  <data name="HelpUserJoined" xml:space="preserve">
    <value>The message the bot uses to welcome users to the channel. See options for "no welcome", "welcome when joined", or "welcome when user chats".</value>
  </data>
  <data name="Helpviewers" xml:space="preserve">
    <value>display name of the user sending action</value>
  </data>
  <data name="Helpwinner" xml:space="preserve">
    <value>display winner of Giveaway event</value>
  </data>
  <data name="host" xml:space="preserve">
    <value>hosting</value>
  </data>
  <data name="join" xml:space="preserve">
    <value>join</value>
    <comment>default command - join user game play list, can be translated</comment>
  </data>
  <data name="JoinChannel" xml:space="preserve">
    <value>Currently not used.</value>
  </data>
  <data name="leave" xml:space="preserve">
    <value>leave</value>
    <comment>default command - leave user game play list, can be translated</comment>
  </data>
  <data name="LeaveChannel" xml:space="preserve">
    <value>Currently not used.</value>
  </data>
  <data name="lurk" xml:space="preserve">
    <value>lurk</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="Msgaddcommand" xml:space="preserve">
    <value>Command {0} added!</value>
    <comment>Leave the "{0}" where the command name should be included.</comment>
  </data>
  <data name="MsgAllCateogry" xml:space="preserve">
    <value>All</value>
    <comment>The default gaming category a command applies, actual categories will get added this is default 'all' categories.</comment>
  </data>
  <data name="MsgBeingHosted" xml:space="preserve">
    <value>Thanks #user for #autohost this channel!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="MsgBits" xml:space="preserve">
    <value>Thanks #user for giving #bits!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="Msgbot" xml:space="preserve">
    <value>TwineChatBot written by WrithemTwine, https://github.com/WrithemTwine/TwineChatBot/ . Free to try and use, just give attribution. Testers needed.</value>
  </data>
  <data name="Msgcommandnotfound" xml:space="preserve">
    <value>Command not found.</value>
  </data>
  <data name="Msgcommands" xml:space="preserve">
    <value>The list of commands: #query</value>
  </data>
  <data name="MsgCommunitySubs" xml:space="preserve">
    <value>Thanks #user for giving #count to the community!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="MsgDataNotFound" xml:space="preserve">
    <value>data not found.</value>
  </data>
  <data name="Msgdefaultcommand" xml:space="preserve">
    <value>Default command, not changed.</value>
  </data>
  <data name="Msgdequeue" xml:space="preserve">
    <value>Also with leave, user leaves the play list</value>
  </data>
  <data name="Msgeditcommand" xml:space="preserve">
    <value>Command {0} edited!</value>
    <comment>Leave the "{0}" where the command name should be included.</comment>
  </data>
  <data name="Msgenqueue" xml:space="preserve">
    <value>Also with join, user join the play list</value>
  </data>
  <data name="Msgfollow" xml:space="preserve">
    <value>If you are enjoying the content, please hit that follow button!</value>
  </data>
  <data name="Msgfollowage" xml:space="preserve">
    <value>#user has followed for #query!</value>
  </data>
  <data name="MsgGiftSub" xml:space="preserve">
    <value>Thanks #user for gifting a #subplan subscription to #receiveuser!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="Msgjoin" xml:space="preserve">
    <value>The message isn't used in response.</value>
  </data>
  <data name="Msgleave" xml:space="preserve">
    <value>The message isn't used in response.</value>
  </data>
  <data name="MsgLive" xml:space="preserve">
    <value>#everyone #user is now live streaming #category - #title! Come join and say hi at: #url</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="Msglurk" xml:space="preserve">
    <value>#user is now lurking. See you soon!</value>
  </data>
  <data name="MsgNewFollow" xml:space="preserve">
    <value>Thanks #user for the follow!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="MsgNotFollower" xml:space="preserve">
    <value>not a follower.</value>
  </data>
  <data name="MsgNoUsage" xml:space="preserve">
    <value>No usage available.</value>
  </data>
  <data name="Msgqinfo" xml:space="preserve">
    <value>Use -!join 'gamertag'- (or !enqueue) to join the queue, and !leave (or !dequeue) to leave the queue.</value>
  </data>
  <data name="Msgqstart" xml:space="preserve">
    <value>The queue list to join me in the game has started!</value>
  </data>
  <data name="Msgqstop" xml:space="preserve">
    <value>The queue list to join me is stopped.</value>
  </data>
  <data name="Msgqueue" xml:space="preserve">
    <value>The details of the queue, list who is in it</value>
  </data>
  <data name="MsgRaid" xml:space="preserve">
    <value>Thanks #user for bringing #viewers and raiding the channel!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="Msgremovecommand" xml:space="preserve">
    <value>Command removed</value>
  </data>
  <data name="MsgResubscribe" xml:space="preserve">
    <value>Thanks #user for re-subscribing!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="MsgReturnUserJoined" xml:space="preserve">
    <value>Thanks #user for returning to the channel!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="Msgso" xml:space="preserve">
    <value>Go check out #user at #url and consider following them!</value>
    <comment>message for "Shout Out" (so), to recognize another streamer/channel</comment>
  </data>
  <data name="Msgsocials" xml:space="preserve">
    <value>Here are my social media connections: </value>
  </data>
  <data name="Msgstreamoffline" xml:space="preserve">
    <value>The stream is offline.</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="MsgSubscribe" xml:space="preserve">
    <value>Thanks #user for the subscribing!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="MsgSupporterJoined" xml:space="preserve">
    <value>Thanks #user for supporting the channel and welcome back to stream!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="Msgunlurk" xml:space="preserve">
    <value>#user has returned. Welcome back!</value>
  </data>
  <data name="Msguptime" xml:space="preserve">
    <value>#user has been streaming for #uptime.</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="Msgusage" xml:space="preserve">
    <value>The #com usage is: #query</value>
  </data>
  <data name="MsgUserJoined" xml:space="preserve">
    <value>Thanks #user for stopping by the channel!</value>
    <comment>leave #(variable) intact, the message otherwise can be re-arranged/translated as necessary. also used as default message to build data table</comment>
  </data>
  <data name="Msgwatchtime" xml:space="preserve">
    <value>#user has watched a total of #query.</value>
  </data>
  <data name="Msgworklurk" xml:space="preserve">
    <value>#user is lurking while making some moohla! See you soon!</value>
  </data>
  <data name="or" xml:space="preserve">
    <value>{0} or {1}</value>
    <comment>translate "or", leave {0} and {1} for the message</comment>
  </data>
  <data name="Paramaddcommand" xml:space="preserve">
    <value>-p:Mod -param:true -use:!addcommand command &lt;switches-optional&gt; &lt;message&gt;. See documentation for &lt;switches&gt;.</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Parambot" xml:space="preserve">
    <value>-use:!bot</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramcommands" xml:space="preserve">
    <value>-t:Commands -f:CmdName -top:-1 -s:ASC -use:!commands</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramdequeue" xml:space="preserve">
    <value>-use:!dequeue</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Parameachsocial" xml:space="preserve">
    <value>-use:!&lt;social_name&gt;</value>
  </data>
  <data name="Parameditcommand" xml:space="preserve">
    <value>-p:Mod -param:true -use:!editcommand command &lt;switches-optional&gt; &lt;message&gt;. See documentation for &lt;switches&gt;.</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramenqueue" xml:space="preserve">
    <value>-use:!enqueue</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramfollow" xml:space="preserve">
    <value>-use:!follow</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramfollowage" xml:space="preserve">
    <value>-t:Followers -f:FollowedDate -param:true -use:!followage or !followage &lt;user&gt;</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramjoin" xml:space="preserve">
    <value>-use:!join</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramleave" xml:space="preserve">
    <value>-use:!leave</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramlurk" xml:space="preserve">
    <value>-use:!lurk</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramqinfo" xml:space="preserve">
    <value>-use:!qinfo</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramqstart" xml:space="preserve">
    <value>-p:Mod -use:!qstart mod only</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramqstop" xml:space="preserve">
    <value>-p:Mod -use:!qstop mod only</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramqueue" xml:space="preserve">
    <value>-p:Mod -use:!queue mods only</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramremovecommand" xml:space="preserve">
    <value>-p:Mod -param:true -use:!removecommand command. Does not remove default commands.</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramso" xml:space="preserve">
    <value>-p:Mod -param:true -use:!so username - only mods can use !so.</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramsocials" xml:space="preserve">
    <value>-use:!socials</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramunlurk" xml:space="preserve">
    <value>-use:!unlurk</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramuptime" xml:space="preserve">
    <value>-use:!uptime</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramusage" xml:space="preserve">
    <value>-t:Commands -f:Usage -param:true -use:!usage &lt;command&gt;</value>
  </data>
  <data name="Paramwatchtime" xml:space="preserve">
    <value>-t:Users -f:WatchTime -param:true -use:!watchtime or !watchtime &lt;user&gt;</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Paramworklurk" xml:space="preserve">
    <value>-use:!worklurk</value>
    <comment>parameter for command, don't change switch text between '-' and ':'</comment>
  </data>
  <data name="Pluralbits" xml:space="preserve">
    <value>bit, bits</value>
    <comment>comma separated 'single, plural'</comment>
  </data>
  <data name="Pluralday" xml:space="preserve">
    <value>day, days</value>
  </data>
  <data name="Pluralhour" xml:space="preserve">
    <value>hour, hours</value>
  </data>
  <data name="Pluralminute" xml:space="preserve">
    <value>minute, minutes</value>
  </data>
  <data name="Pluralmonth" xml:space="preserve">
    <value>month, months</value>
    <comment>comma separated 'single, plural'</comment>
  </data>
  <data name="Pluralsub" xml:space="preserve">
    <value>subscription, subscriptions</value>
    <comment>comma separated 'single, plural'</comment>
  </data>
  <data name="Pluralviewers" xml:space="preserve">
    <value>viewer, viewers</value>
    <comment>comma separated 'single, plural'</comment>
  </data>
  <data name="Pluralyear" xml:space="preserve">
    <value>year, years</value>
  </data>
  <data name="qinfo" xml:space="preserve">
    <value>qinfo</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="qstart" xml:space="preserve">
    <value>qstart</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="qstop" xml:space="preserve">
    <value>qstop</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="queue" xml:space="preserve">
    <value>queue</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="Random" xml:space="preserve">
    <value>Currently not used.</value>
  </data>
  <data name="removecommand" xml:space="preserve">
    <value>removecommand</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="Respond" xml:space="preserve">
    <value>Currently not used.</value>
  </data>
  <data name="so" xml:space="preserve">
    <value>so</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="socials" xml:space="preserve">
    <value>socials</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="Total" xml:space="preserve">
    <value>total</value>
    <comment>MsgVar variable value</comment>
  </data>
  <data name="TwineBotInfo" xml:space="preserve">
    <value>TwineChatBot by WrithemTwine, #url, version {0}.{1}.{2}.{3} is now connected!</value>
    <comment>Leave " WrithemTwine ", " #url#author ", and " {0}.{1}.{2}.{3} " intact - used to provide information about the bot</comment>
  </data>
  <data name="unlurk" xml:space="preserve">
    <value>unlurk</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="uptime" xml:space="preserve">
    <value>uptime</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="usage" xml:space="preserve">
    <value>usage</value>
    <comment>get command usage</comment>
  </data>
  <data name="watchtime" xml:space="preserve">
    <value>watchtime</value>
    <comment>default command, can be translated</comment>
  </data>
  <data name="worklurk" xml:space="preserve">
    <value>worklurk</value>
    <comment>default command, can be translated</comment>
  </data>
</root>