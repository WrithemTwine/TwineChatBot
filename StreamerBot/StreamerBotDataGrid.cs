using StreamerBotLib.BotIOController;
using StreamerBotLib.DataSQL.Models;
using StreamerBotLib.Models;
using StreamerBotLib.Systems;
using System.Data;
using System.Windows.Controls.Primitives;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows;

namespace StreamerBot
{
    public partial class StreamerBotWindow
    {
        #region DataGrid Columns and Editing
        private void DG_AutoGeneratedColumns(object sender, EventArgs e)
        {
            const int DGColWidth = 250;

            void Collapse(DataGridColumn dgc)
            {
                dgc.Visibility = Visibility.Collapsed;
            }

            void ReadOnly(DataGridColumn dgc)
            {
                dgc.IsReadOnly = true;
            }

            void SetWidth(DataGridColumn dgc, int Width = -1)
            {
                Width = Width < 0 ? DGColWidth : Width;

                // TODO: Research and update setting column width based on actual value, currently doesn't appear available when "autogeneratedcolumns" occurs

                // change the column width only if the specified value is less than current width
                if (dgc.Width.DisplayValue > Width || (dgc.Header.ToString() is "Message" or "WebHook" or "Webhook" or "TeachingMsg"))
                {
                    dgc.Width = Width;
                }
            }

            DataGrid dg = (DataGrid)sender;

            // find the new item, hide columns other than the primary data columns, i.e. relational columns
            //switch (dg.Name)
            //{
            //    case "DG_Users":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            if (dc.Header.ToString() is not "Id" and not "UserName" and not "FirstDateSeen" and not "CurrLoginDate" and not "LastDateSeen" and not "WatchTime" and not "UserId" and not "Platform")
            //            {
            //                Collapse(dc);
            //            }
            //        }
            //        break;
            //    case "DG_Followers":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            if (dc.Header.ToString() is not "Id" and not "UserName" and not "IsFollower" and not "FollowedDate" and not "UserId" and not "Platform" and not "StatusChangeDate" and not "Category")
            //            {
            //                Collapse(dc);
            //            }
            //        }
            //        break;
            //    case "DG_Currency":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            if (dc.Header.ToString() is not "CurrencyName" and not "AccrueAmt" and not "Seconds" and not "MaxValue")
            //            {
            //                Collapse(dc);
            //            }
            //        }
            //        break;
            //    case "DG_CurrencyAccrual":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            if (dc.Header.ToString() is not "UserName" and not "CurrencyName" and not "Value")
            //            {
            //                Collapse(dc);
            //            }
            //        }
            //        break;

            //    case "DG_BuiltInCommands":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            if (dc.Header.ToString() == "CmdName")
            //            {
            //                ReadOnly(dc);
            //            }
            //            SetWidth(dc);
            //        }
            //        break;
            //    case "DG_UserDefinedCommands" or "DG_CommonMsgs" or "DG_CustomWelcome":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            SetWidth(dc);
            //        }
            //        break;
            //    case "DG_CategoryList" or "DG_CategoryList_Clips":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            if (dc.Header.ToString() is not "Category" and not "CategoryId" and not "StreamCount")
            //            {
            //                Collapse(dc);
            //            }
            //        }
            //        break;
            //    case "DG_DeathCounter":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            if (dc.Header.ToString() is not "Category" and not "Counter")
            //            {
            //                Collapse(dc);
            //            }
            //        }
            //        break;
            //    case "DG_Webhooks":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            SetWidth(dc);
            //        }
            //        break;
            //    case "BanRules" or "LearnMsgs":
            //        foreach (DataGridColumn dc in dg.Columns)
            //        {
            //            if (dc.Header.ToString() is "LearnMsgsBanReasons" or "BanRulesLearnMsgs")
            //            {
            //                Collapse(dc);
            //            }
            //            else
            //            {
            //                SetWidth(dc);
            //            }
            //        }
            //        break;
            //    default:
            //        break;
            //}
        
        }

        private void Button_ClearWatchTime_Click(object sender, RoutedEventArgs e)
        {
            BotController.ClearWatchTime();
        }

        private void Button_ClearCurrencyAccrlValues_Click(object sender, RoutedEventArgs e)
        {
            BotController.ClearAllCurrenciesValues();
        }

        private void Button_ClearNonFollowers_Click(object sender, RoutedEventArgs e)
        {
            BotController.ClearUsersNonFollowers();
        }

        private void DG_Edit_ContextMenuOpening(object sender, ContextMenuEventArgs e)
        {
            if (sender.GetType() == typeof(DataGrid))
            {
                bool FoundAddEdit = ((DataGrid)sender).Name is "DG_BuiltInCommands" or "DG_CommonMsgs";
                bool FoundAddShout = ((DataGrid)sender).Name is "DG_Users" or "DG_Followers";
                bool FoundIsEnabled = SystemsController.CheckField(((DataGrid)sender).ItemsSource.GetType().BaseType.GetGenericArguments()[0].Name, "IsEnabled"); // TODO: fix getting a table name

                foreach (var M in ((ContextMenu)Resources["DataGrid_ContextMenu"]).Items)
                {
                    if (M.GetType() == typeof(MenuItem))
                    {
                        if (((MenuItem)M).Name is "DataGridContextMenu_AddItem" or "DataGridContextMenu_DeleteItems")
                        {
                            ((MenuItem)M).IsEnabled = !FoundAddEdit;
                        }
                        else if (((MenuItem)M).Name is "DataGridContextMenu_AutoShout" or "DataGridContextMenu_LiveMonitor")
                        {
                            // TODO: limit 'live monitor' menu access to only when the multi-live datamanager is active
                            ((MenuItem)M).Visibility = FoundAddShout ? Visibility.Visible : Visibility.Collapsed;
                        }
                        else if (((MenuItem)M).Name is "DataGridContextMenu_EnableItems" or "DataGridContextMenu_DisableItems")
                        {
                            ((MenuItem)M).IsEnabled = FoundIsEnabled;
                        }
                    }
                    else if (M.GetType() == typeof(Separator))
                    {
                        if (((Separator)M).Name == "DataGridContextMenu_Separator")
                        {
                            ((Separator)M).Visibility = FoundAddShout ? Visibility.Visible : Visibility.Collapsed;
                        }
                    }
                }
            }
        }

        private void DG_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            DataGrid item = sender as DataGrid;

            Popup_DataEdit(item, false);
        }

        private void MenuItem_AddClick(object sender, RoutedEventArgs e)
        {
            DataGrid item = (((sender as MenuItem).Parent as ContextMenu).Parent as Popup).PlacementTarget as DataGrid;

            Popup_DataEdit(item);
        }

        private void Popup_DataEdit(DataGrid sourceDataGrid, bool AddNew = true)
        {
            if (sourceDataGrid.Name is "DataGrid_OverlayService_Actions" or "DG_ModApprove")
            {
                PopupWindows.SetTableData(Controller.Systems.GetOverlayActions());
            }

            if (AddNew)
            {
                DataView CurrdataView = (DataView)sourceDataGrid.ItemsSource;
                if (CurrdataView != null)
                {
                    PopupWindows.DataGridAddNewItem(SystemsController.DataManage, CurrdataView.Table);
                }
            }
            else
            {
                DataRowView dataView = (DataRowView)sourceDataGrid.SelectedItem;
                if (dataView != null)
                {
                    PopupWindows.DataGridEditItem(SystemsController.DataManage, dataView.Row.Table, dataView.Row);
                }
            }
        }

        private void MenuItem_EditClick(object sender, RoutedEventArgs e)
        {
            DataGrid item = (((sender as MenuItem).Parent as ContextMenu).Parent as Popup).PlacementTarget as DataGrid;

            Popup_DataEdit(item, false);
        }

        private void MenuItem_DeleteClick(object sender, RoutedEventArgs e)
        {
            DataGrid item = (((sender as MenuItem).Parent as ContextMenu).Parent as Popup).PlacementTarget as DataGrid;

            SystemsController.DeleteRows(new List<DataRow>(item.SelectedItems.Cast<DataRowView>().Select(DRV => DRV.Row)));
        }

        private void MenuItem_AutoShoutClick(object sender, RoutedEventArgs e)
        {
            DataGrid item = (((sender as MenuItem).Parent as ContextMenu).Parent as Popup).PlacementTarget as DataGrid;

            foreach (UserBase dr in new List<UserBase>(item.SelectedItems.Cast<UserBase>().Select(DRV => DRV)))
            {
                BotController.AddNewAutoShoutUser(dr.UserName, dr.UserId, dr.Platform);
            }
        }

        private void MenuItem_LiveMonitorClick(object sender, RoutedEventArgs e)
        {
            DataGrid item = (((sender as MenuItem).Parent as ContextMenu).Parent as Popup).PlacementTarget as DataGrid;
            Controller.Systems.AddNewMonitorChannel(new List<LiveUser>(item.SelectedItems.Cast<UserBase>().Select(DRV => new LiveUser(DRV.UserName, DRV.Platform, DRV.UserId))));
        }
        private void DataGridContextMenu_EnableItems_Click(object sender, RoutedEventArgs e)
        {
            DataGrid item = (((sender as MenuItem).Parent as ContextMenu).Parent as Popup).PlacementTarget as DataGrid;

            SystemsController.UpdateIsEnabledRows(new List<DataRow>(item.SelectedItems.Cast<DataRowView>().Select(DRV => DRV.Row)), true);
        }

        private void DataGridContextMenu_DisableItems_Click(object sender, RoutedEventArgs e)
        {
            DataGrid item = (((sender as MenuItem).Parent as ContextMenu).Parent as Popup).PlacementTarget as DataGrid;

            SystemsController.UpdateIsEnabledRows(new List<DataRow>(item.SelectedItems.Cast<DataRowView>().Select(DRV => DRV.Row)), false);
        }

        #endregion
    }
}
