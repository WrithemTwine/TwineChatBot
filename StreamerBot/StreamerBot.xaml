<Window x:Class="StreamerBot.StreamerBotWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:wv2="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"
        xmlns:Enums="clr-namespace:StreamerBotLib.Enums;assembly=StreamerBotLib"
        xmlns:GUI="clr-namespace:StreamerBotLib.GUI;assembly=StreamerBotLib"
        xmlns:local="clr-namespace:StreamerBot"
        xmlns:Models="clr-namespace:StreamerBotLib.Models;assembly=StreamerBotLib"
        xmlns:s="clr-namespace:StreamerBotLib.Properties;assembly=StreamerBotLib"
        xmlns:StaticLib="clr-namespace:StreamerBotLib.Static;assembly=StreamerBotLib"
        mc:Ignorable="d"
        Title="Streamer Bot Manager" 
        Top="{Binding GUITop, Source={x:Static s:Settings.Default}, Mode=TwoWay}"
        Left="{Binding GUILeft, Source={x:Static s:Settings.Default}, Mode=TwoWay}"
        Height="{Binding GUIHeight, Source={x:Static s:Settings.Default}, Mode=TwoWay}" 
        Width="{Binding GUIWidth, Source={x:Static s:Settings.Default}, Mode=TwoWay}"
        Loaded="Window_Loaded" Closing="OnWindowClosing" UseLayoutRounding="True" SnapsToDevicePixels="True"
        Background="{DynamicResource FullBackground}"
    >
    <Window.Resources>
        <ResourceDictionary>
            <GUI:GUITwitchBots x:Name="TwitchBot" x:Key="TwitchBot" />
            <GUI:GUIDataManagerViews x:Name="DataViews" x:Key="DataViews" />
            <GUI:GUIAppStats x:Name="AppStats" x:Key="AppStats" />
            <GUI:GUIAppServices x:Name="AppServices" x:Key="AppServices" />
            <StaticLib:MsgVarHelp x:Name="CommandInfo" x:Key="CommandInfo" />
            <Models:IndexConverter x:Name="IndexConverter" x:Key="IndexConverter" />
            <Models:StatValueConverter x:Name="AppDataConverter" x:Key="AppDataConverter" />
            <Enums:ViewerTypesString x:Name="ViewerTypesString" x:Key="ViewerTypesString" />
            <local:DebugFlags x:Name="DebugFlags" x:Key="DebugFlags" />

            <ContextMenu x:Key="DataGrid_ContextMenu" Name="DataGrid_ContextMenu">
                <MenuItem x:Name="DataGridContextMenu_AddItem"  Header="Add New Row" Click="MenuItem_AddClick" />
                <MenuItem x:Name="DataGridContextMenu_EditItem" Header="Edit Selected Row" Click="MenuItem_EditClick" />
                <MenuItem x:Name="DataGridContextMenu_DeleteItems" Header="Delete Selected Row(s)" Click="MenuItem_DeleteClick" ToolTip="Delete 1 or more rows, not for preset tables. No warning messages."/>
                <Separator x:Name="DataGridContextMenu_Separator1" />
                <MenuItem x:Name="DataGridContextMenu_AutoShout" Header="Add User to AutoShout list" ToolTip="Does not Duplicate" Visibility="Collapsed" Click="MenuItem_AutoShoutClick"/>
                <MenuItem x:Name="DataGridContextMenu_LiveMonitor" Header="Add User to LiveMonitor list" ToolTip="Does not Duplicate, 100 max" Visibility="Collapsed" Click="MenuItem_LiveMonitorClick"/>
                <Separator x:Name="DataGridContextMenu_Separator2" />
                <MenuItem x:Name="DataGridContextMenu_EnableItems" Header="Enable Selected Row(s)" Click="DataGridContextMenu_EnableItems_Click" />
                <MenuItem x:Name="DataGridContextMenu_DisableItems" Header="Disable Selected Row(s)" Click="DataGridContextMenu_DisableItems_Click" />
            </ContextMenu>

            <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
                <Setter Property="ContextMenu" Value="{DynamicResource DataGrid_ContextMenu}"/>
            </Style>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Culture/GUI_Msgs.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    <DockPanel>
        <StatusBar DockPanel.Dock="Bottom" Visibility="Collapsed" x:Name="StatusBar_TwitchAuth_BotAuthCodeInvalid">
            <StatusBarItem Padding="0" Margin="0">
                <TextBlock Foreground="{StaticResource BrightStop}" Text="The Twitch-Bot Account authorization code has failed. The bots have stopped due to no access. Please re-authorize to reactivate the bot."/>
            </StatusBarItem>
        </StatusBar>
        <StatusBar DockPanel.Dock="Bottom" Visibility="Collapsed" x:Name="StatusBar_TwitchAuth_StreamerAuthCodeInvalid">
            <StatusBarItem Padding="0" Margin="0">
                <TextBlock Foreground="{StaticResource BrightStop}" Text="The Twitch-Streamer Account authorization code has failed. The bots have stopped due to no access. Please re-authorize to reactivate the bot."/>
            </StatusBarItem>
        </StatusBar>
        <StatusBar DockPanel.Dock="Bottom" Height="55" DataContext="{Binding Mode=OneWay, Source={StaticResource DataViews}}">
            <StatusBar.Resources>
                <Style TargetType="StackPanel">
                    <Setter Property="Orientation" Value="Horizontal" />
                </Style>
            </StatusBar.Resources>
            <StatusBarItem>
                <Grid>
                    <StackPanel x:Name="StatusBarItem_NewStableVersion" Height="35" Panel.ZIndex="5" Visibility="Collapsed">
                        <wv2:WebView2 x:Name="WebView2_GitHub_StableVersion" 
                                  Visibility="Collapsed" 
                                  DataContext="" Source="{Binding Mode=OneWay, Source={x:Static StaticLib:OptionFlags.GitHubStableLink}}" 
                                  NavigationCompleted="WebView2_GitHub_StableVersion_NavigationCompleted"/>

                        <TextBlock 
                            FontWeight="ExtraBold"
                            Foreground="{DynamicResource BrightGo}" 
                            Text="New Release Version!" 
                            TextWrapping="Wrap" Width="90" 
                            TextAlignment="Center" >
                            <TextBlock.ToolTip>
                                <TextBlock>
                            New Release version available! Download from "GitHub->Stable" tab.
                                </TextBlock>
                            </TextBlock.ToolTip>
                        </TextBlock>
                    </StackPanel>
                    <StackPanel Orientation="Vertical" Panel.ZIndex="1" >
                        <Label x:Name="StatusBarItem_BetaLabel" HorizontalContentAlignment="Center" Padding="0" 
                               Visibility="Collapsed"
                               FontSize="16" FontWeight="DemiBold">
                            <TextBlock Foreground="{DynamicResource LabelBeta}">Beta</TextBlock>
                        </Label>
                        <Label x:Name="StatusBar_Label_Version" Content="Version Label" Padding="0"/>
                    </StackPanel>
                </Grid>
            </StatusBarItem>
            <StatusBarItem>
                <StackPanel>
                    <Label Visibility="Visible" x:Name="Label_StreamStatusOff"
                           BorderThickness="3" HorizontalContentAlignment="Center"
                           FontWeight="ExtraBold"
                           Width="120"
                           BorderBrush="{DynamicResource BrightStop}">
                        <TextBlock Foreground="{DynamicResource BrightStop}">
                            Stream Offline
                        </TextBlock>
                    </Label>
                    <Label Visibility="Collapsed" x:Name="Label_StreamStatusOn"
                           BorderThickness="3" HorizontalContentAlignment="Center"
                           FontWeight="ExtraBold"
                           Width="120"
                           BorderBrush="{DynamicResource BrightGo}">
                        <TextBlock Foreground="{DynamicResource BrightGo}">
                            Stream Online
                        </TextBlock>
                    </Label>
                </StackPanel>
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <StackPanel Orientation="Vertical">
                    <Label Padding="3,0" HorizontalAlignment="Center">
                        <Label.ToolTip>All Users who visited the stream while online.
                        </Label.ToolTip> All Viewers:
                    </Label>
                    <Label Padding="3,0" HorizontalAlignment="Center">
                        <TextBlock Text="{Binding CurrUserCount, FallbackValue=0, Mode=OneWay, StringFormat=\{0:N0\}}" />
                    </Label>
                </StackPanel>
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <Button Click="StatusBar_Button_UpdateFollows_Click" Background="{DynamicResource PartBackground}">
                    <StackPanel Orientation="Vertical">
                        <Label Padding="3,0" HorizontalAlignment="Center">
                            <Label.ToolTip>
                                Click here to refresh now. Use 'Options' to manage followers, including regular updates, does not update immediately for unfollow.
                            </Label.ToolTip>
                            Current Follows:
                        </Label>
                        <Label Padding="3,0" HorizontalAlignment="Center">
                            <TextBlock Text="{Binding CurrFollowers, FallbackValue=0, StringFormat=\{0:N0\}}" Background="{x:Null}"/>
                        </Label>
                    </StackPanel>
                </Button>
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <Label Content="Installed Commands" Padding="0" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label ToolTip="Built-in Commands" Padding="3,0">Built-in:</Label>
                        <Label Content="{Binding CurrBuiltInComCount, FallbackValue=0,NotifyOnSourceUpdated=True, StringFormat=\{0:N\}}"  Padding="3,0" />
                        <Label ToolTip="User-Defined Commands" Padding="3,0">User-Defined:</Label>
                        <Label Content="{Binding CurrUserComsCount, FallbackValue=0,NotifyOnSourceUpdated=True, StringFormat=\{0:N\}}" Padding="3,0" />
                    </StackPanel>
                </StackPanel>
            </StatusBarItem>
            <Separator />
            <StatusBarItem>
                <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                    <Label ToolTip="The earliest token expiration date." Padding="0">Token Exp:</Label>
                    <Label x:Name="StatusBarItem_TokenDate" Padding="0"/>
                </StackPanel>
            </StatusBarItem>
            <Separator />
            <StatusBarItem Padding="0,0,0,0">
                <Button Name="Button_RefreshCategory" Grid.Column="0" 
                        HorizontalAlignment="Left" VerticalAlignment="Center" 
                        Padding="0" Click="Button_RefreshCategory_Click" ToolTip="Click to refresh">
                    <StackPanel Orientation="Vertical" HorizontalAlignment="Left">
                        <Label Padding="5,5,5,0">Current Category:</Label>
                        <Label x:Name="TextBlock_CurrentCategory" Grid.Column="2" VerticalAlignment="Center" Padding="5,0,5,5"/>
                    </StackPanel>
                </Button>
            </StatusBarItem>
        </StatusBar>
        <TabControl DockPanel.Dock="Top" TabStripPlacement="Left">
            <TabItem Header="Bots">
                <TabControl>
                    <TabItem Header="Start Bots">
                        <DockPanel>
                            <Expander DockPanel.Dock="Top" Header="Bot Usage Info" IsExpanded="{Binding ExpanderBotUsageInfo, Mode=OneWay}">
                                <TextBlock>The bot credentials form needs to be completed with at least client id and access token.<LineBreak />
                                The LiveStreamMonitor Service will allow monitoring multiple channels if the &quot;MultiUserLiveBot&quot; is running or started, but functionality <LineBreak />
                                stops when the separate "MultiUserLiveBot" process starts.<LineBreak />
                                For optimal operation, don't turn start and stop the bots rapidly - allow some time between each operation.<LineBreak />
                                Changing the Twitch password can invalidate the access token.<LineBreak /><LineBreak />
                                Start and Stop certain bots when stream goes online! Depends on Live Monitor Bot being active and the detection time - when the<LineBreak />
                                stream is detected online is when the specific bots would start.
                                </TextBlock>
                            </Expander>
                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" HorizontalAlignment="Center">
                                <Button Content="Start All Bots" Click="GUIStartBots_Click" Margin="15,5" />
                                <Button Content="Stop All Bots" Click="GUIStopBots_Click" Margin="15,5" />
                            </StackPanel>
                            <ScrollViewer VerticalScrollBarVisibility="Auto">
                                <WrapPanel HorizontalAlignment="Center">
                                    <GroupBox Header="LiveStream Monitor Service">
                                        <StackPanel Orientation="Vertical">
                                            <WrapPanel>
                                                <Label x:Name="Label_TwitchMultiLive_Start" Visibility="Collapsed">
                                                    <TextBlock Foreground="{DynamicResource Go}">The Twitch LiveStream Monitor Client is started!</TextBlock>
                                                </Label>
                                                <Label x:Name="Label_TwitchMultiLive_Stop" Visibility="Visible">
                                                    <TextBlock Foreground="{DynamicResource Stop}">The Twitch LiveStream Monitor Client is stopped!</TextBlock>
                                                </Label>
                                                <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchLiveStreamSvcAutoStart}" >
                                                    <TextBlock>Auto-start when application starts</TextBlock>
                                                </CheckBox>
                                                <RadioButton DataContext="{Binding TwitchLiveMonitor, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_LiveBotStart" IsEnabled="False" PreviewMouseLeftButtonDown="RadioButton_StartBot_PreviewMoustLeftButtonDown" Checked="Radio_Twitch_LiveBotStart_Checked">
                                                    <TextBlock>Start Live Monitor Bot</TextBlock>
                                                </RadioButton>
                                                <RadioButton DataContext="{Binding TwitchLiveMonitor, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_LiveBotStop" IsEnabled="False" IsChecked="True" PreviewMouseLeftButtonDown="RadioButton_StopBot_PreviewMoustLeftButtonDown" Checked="Radio_Twitch_LiveBotStop_Checked">
                                                    <TextBlock>Stop Live Monitor Bot</TextBlock>
                                                </RadioButton>
                                                <Label x:Name="Label_TwitchMultiLive_Error" Visibility="Collapsed" Height="Auto">
                                                    <TextBlock Foreground="{DynamicResource Stop}">The Twitch MultiLive Client failed to start! Check the Access Token Refresh Date and the Token Scope.</TextBlock>
                                                </Label>
                                            </WrapPanel>
                                            <GroupBox x:Name="GroupBox_Bots_Starts_MultiLive" Header="MultiLive Monitoring Bot" Width="Auto" Visibility="Collapsed">
                                                <WrapPanel Orientation="Vertical">
                                                    <Label x:Name="Label_LiveStream_MultiLiveActiveMsg" Visibility="Collapsed">
                                                        <TextBlock Foreground="{DynamicResource Stop}">The MultiUserLiveBot is active, single channel activated.</TextBlock>
                                                    </Label>
                                                    <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchMultiLiveAutoStart}">
                                                        <TextBlock>Auto-start when LiveMonitor starts</TextBlock>
                                                    </CheckBox>
                                                    <RadioButton x:Name="Radio_MultiLiveTwitch_StartBot" IsEnabled="False" HorizontalAlignment="Left" Checked="BC_MultiLiveTwitch_BotOp">
                                                        <TextBlock>Start Bot</TextBlock>
                                                    </RadioButton>
                                                    <RadioButton x:Name="Radio_MultiLiveTwitch_StopBot" IsChecked="True" IsEnabled="False" HorizontalAlignment="Left" Checked="BC_MultiLiveTwitch_BotOp">
                                                        <TextBlock>Stop Bot</TextBlock>
                                                    </RadioButton>
                                                </WrapPanel>
                                            </GroupBox>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Follower Service">
                                        <WrapPanel>
                                            <Label x:Name="Label_TwitchFollow_Start" Visibility="Collapsed">
                                                <TextBlock Foreground="{DynamicResource Go}">The Twitch Follower Client is started!</TextBlock>
                                            </Label>
                                            <Label x:Name="Label_TwitchFollow_Stop" Visibility="Visible">
                                                <TextBlock Foreground="{DynamicResource Stop}">The Twitch Follower Client is stopped!</TextBlock>
                                            </Label>
                                            <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchFollowerSvcAutoStart}">
                                                <TextBlock TextWrapping="Wrap"><Run Text="Auto-start when application starts"/></TextBlock>
                                            </CheckBox>
                                            <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchAddFollowersStart, Mode=TwoWay}" ToolTip="Will also re-perform when clicking 'Stop Bot' then 'Start Bot'.">
                                                <TextBlock TextWrapping="Wrap">Enable adding all followers when bot starts.</TextBlock>
                                            </CheckBox>
                                            <RadioButton DataContext="{Binding TwitchFollower, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_FollowBotStart" IsEnabled="False" PreviewMouseLeftButtonDown="RadioButton_StartBot_PreviewMoustLeftButtonDown" >
                                                <TextBlock>
                                                    Start Follower Service Bot
                                                </TextBlock>
                                            </RadioButton>
                                            <RadioButton DataContext="{Binding TwitchFollower, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_FollowBotStop" IsEnabled="False" IsChecked="True" PreviewMouseLeftButtonDown="RadioButton_StopBot_PreviewMoustLeftButtonDown">
                                                <TextBlock>
                                                    Stop Follower Service Bot
                                                </TextBlock>
                                            </RadioButton>
                                            <Label x:Name="Label_TwitchFollow_Error" Visibility="Collapsed" Height="Auto">
                                                <TextBlock Foreground="{DynamicResource Stop}">The Twitch Follow Client failed to start! Check the Access Token Refresh Date and the Token Scope.</TextBlock>
                                            </Label>
                                            <GroupBox Header="Activate Per Online Status" Width="Auto">
                                                <StackPanel>
                                                    <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchFollowerConnectOnline}">
                                                        <TextBlock>Connect bot when stream is online</TextBlock>
                                                    </CheckBox>
                                                    <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchFollowerDisconnectOffline}">
                                                        <TextBlock>Disconnect bot when stream is offline</TextBlock>
                                                    </CheckBox>
                                                </StackPanel>
                                            </GroupBox>
                                        </WrapPanel>
                                    </GroupBox>
                                    <GroupBox DockPanel.Dock="Top" x:Name="BC_T_groupBox" Header="ChatBot">
                                        <WrapPanel Orientation="Horizontal" >
                                            <Label x:Name="Label_TwitchChat_Start" Visibility="Collapsed">
                                                <TextBlock Foreground="{DynamicResource Go}">The Twitch Chat Client is started!</TextBlock>
                                            </Label>
                                            <Label x:Name="Label_TwitchChat_Stop" Visibility="Visible">
                                                <TextBlock Foreground="{DynamicResource Stop}">The Twitch Chat Client is stopped!</TextBlock>
                                            </Label>
                                            <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchChatBotAutoStart}" LostFocus="Settings_LostFocus" >
                                                <TextBlock>Auto-start when application starts</TextBlock>
                                            </CheckBox>
                                            <RadioButton DataContext="{Binding TwitchChat, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_StartBot" IsEnabled="False" PreviewMouseLeftButtonDown="RadioButton_StartBot_PreviewMoustLeftButtonDown" >
                                                <TextBlock>Start Chat Service Bot</TextBlock>
                                            </RadioButton>
                                            <RadioButton DataContext="{Binding TwitchChat, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_StopBot" IsChecked="True" IsEnabled="False" PreviewMouseLeftButtonDown="RadioButton_StopBot_PreviewMoustLeftButtonDown" >
                                                <TextBlock>Stop Chat Service Bot</TextBlock>
                                            </RadioButton>
                                            <Label x:Name="Label_TwitchChat_Error" Visibility="Collapsed" Height="Auto">
                                                <TextBlock Foreground="{DynamicResource Stop}">The Twitch Chat Client failed to start! Check the Access Token Refresh Date and the Token Scope.</TextBlock>
                                            </Label>
                                            <GroupBox Header="Activate Per Online Status" Width="Auto">
                                                <StackPanel>
                                                    <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchChatBotConnectOnline}" LostFocus="Settings_LostFocus" >
                                                        <TextBlock>Connect bot when stream is online</TextBlock>
                                                    </CheckBox>
                                                    <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchChatBotDisconnectOffline}" LostFocus="Settings_LostFocus" >
                                                        <TextBlock>Disconnect bot when stream is offline</TextBlock>
                                                    </CheckBox>
                                                </StackPanel>
                                            </GroupBox>
                                        </WrapPanel>
                                    </GroupBox>
                                    <GroupBox Header="Clip Service">
                                        <WrapPanel>
                                            <Label x:Name="Label_TwitchClip_Start" Visibility="Collapsed">
                                                <TextBlock Foreground="{DynamicResource Go}">The Twitch Clip Client is started!</TextBlock>
                                            </Label>
                                            <Label x:Name="Label_TwitchClip_Stop" Visibility="Visible">
                                                <TextBlock Foreground="{DynamicResource Stop}">The Twitch Clip Client is stopped!</TextBlock>
                                            </Label>
                                            <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchClipAutoStart}">
                                                <TextBlock>Auto-start when application starts</TextBlock>
                                            </CheckBox>
                                            <RadioButton DataContext="{Binding TwitchClip, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_ClipBotStart" IsEnabled="False" PreviewMouseLeftButtonDown="RadioButton_StartBot_PreviewMoustLeftButtonDown">
                                                <TextBlock>Start Clip Service Bot</TextBlock>
                                            </RadioButton>
                                            <RadioButton DataContext="{Binding TwitchClip, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_ClipBotStop" IsEnabled="False" IsChecked="True" PreviewMouseLeftButtonDown="RadioButton_StopBot_PreviewMoustLeftButtonDown">
                                                <TextBlock>Stop Clip Service Bot</TextBlock>
                                            </RadioButton>
                                            <Label x:Name="Label_TwitchClip_Error" Visibility="Collapsed" Height="Auto">
                                                <TextBlock Foreground="{DynamicResource Stop}">The Twitch Clip Client failed to start! Check the Access Token Refresh Date and the Token Scope.</TextBlock>
                                            </Label>
                                            <GroupBox Header="Activate Per Online Status" Width="Auto">
                                                <StackPanel>
                                                    <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchClipConnectOnline}">
                                                        <TextBlock>Connect bot when stream is online</TextBlock>
                                                    </CheckBox>
                                                    <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchClipDisconnectOffline}">
                                                        <TextBlock>Discconnect bot when stream is offline</TextBlock>
                                                    </CheckBox>
                                                </StackPanel>
                                            </GroupBox>
                                        </WrapPanel>
                                    </GroupBox>
                                    <GroupBox Header="Pub Sub" Visibility="Visible">
                                        <StackPanel Orientation="Vertical">
                                            <WrapPanel>
                                                <WrapPanel.ToolTip>
                                                    <TextBlock>The Twitch PubSub client establishes a constant connection with the server. For this reason, this service should be started and stopped only when it is needed.</TextBlock>
                                                </WrapPanel.ToolTip>
                                                <Label x:Name="Label_TwitchPubSub_Start" Visibility="Collapsed">
                                                    <TextBlock Foreground="{DynamicResource Go}">The Twitch PubSub Client is started!</TextBlock>
                                                </Label>
                                                <Label x:Name="Label_TwitchPubSub_Stop" Visibility="Visible">
                                                    <TextBlock Foreground="{DynamicResource Stop}">The Twitch PubSub Client is stopped!</TextBlock>
                                                </Label>
                                                <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchPubSubOnlineMode}" >
                                                    <TextBlock>Enable PubSub to start when Stream is Live and stop when Stream is not Live.</TextBlock>
                                                </CheckBox>
                                                <RadioButton DataContext="{Binding TwitchBotPubSub, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_PubSubBotStart" IsEnabled="False" PreviewMouseLeftButtonDown="RadioButton_StartBot_PreviewMoustLeftButtonDown">
                                                    <TextBlock>Start PubSub Service Bot</TextBlock>
                                                </RadioButton>
                                                <RadioButton DataContext="{Binding TwitchBotPubSub, Mode=OneWay, Source={StaticResource TwitchBot}}" x:Name="Radio_Twitch_PubSubBotStop" IsEnabled="False" IsChecked="True" PreviewMouseLeftButtonDown="RadioButton_StopBot_PreviewMoustLeftButtonDown">
                                                    <TextBlock>Stop PubSub Service Bot</TextBlock>
                                                </RadioButton>
                                            </WrapPanel>
                                            <GroupBox Width="Auto" Header="Services">
                                                <WrapPanel Orientation="Vertical">
                                                    <Label>
                                                        <TextBlock>Selected Services will only be active when selected and then bot is started.</TextBlock>
                                                    </Label>
                                                    <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding TwitchPubSubChannelPoints}">
                                                        <TextBlock>Listen To Channel Point Events</TextBlock>
                                                    </CheckBox>
                                                </WrapPanel>
                                            </GroupBox>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Media Overlay Service">
                                        <WrapPanel>
                                            <Label x:Name="Label_OverlayService_Start" Visibility="Collapsed">
                                                <TextBlock Foreground="{DynamicResource Go}">The Media Overlay Service is started!</TextBlock>
                                            </Label>
                                            <Label x:Name="Label_OverlayService_Stop" Visibility="Visible">
                                                <TextBlock Foreground="{DynamicResource Stop}">The Media Overlay Service is stopped!</TextBlock>
                                            </Label>
                                            <CheckBox DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding MediaOverlayAutoStart}">
                                                <TextBlock>Auto-start when application starts</TextBlock>
                                            </CheckBox>
                                            <RadioButton DataContext="{Binding MediaOverlayServer, Mode=OneWay, Source={StaticResource AppServices}}" x:Name="Radio_Services_OverlayBotStart" IsEnabled="False" PreviewMouseLeftButtonDown="RadioButton_StartBot_PreviewMoustLeftButtonDown">
                                                <TextBlock>Start Overlay Service Bot</TextBlock>
                                            </RadioButton>
                                            <RadioButton DataContext="{Binding MediaOverlayServer, Mode=OneWay, Source={StaticResource AppServices}}" x:Name="Radio_Services_OverlayBotStop" IsEnabled="False" IsChecked="True" PreviewMouseLeftButtonDown="RadioButton_StopBot_PreviewMoustLeftButtonDown">
                                                <TextBlock>Stop Overlay Service Bot</TextBlock>
                                            </RadioButton>
                                            <Label x:Name="Label_OverlayServer_Error" Visibility="Collapsed" Height="Auto">
                                                <TextBlock Foreground="{DynamicResource Stop}">The Media Overlay Service failed to start! Check the Access Token Refresh Date and the Token Scope.</TextBlock>
                                            </Label>
                                            <GroupBox Width="Auto" Header="Activate Per Online Status">
                                                <WrapPanel Orientation="Vertical">
                                                    <CheckBox  DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" IsChecked="{Binding MediaOverlayStartWithStream}">
                                                        <TextBlock>
                                                            Start and Stop Overlay Server when stream is online or offline.
                                                        </TextBlock>
                                                    </CheckBox>
                                                </WrapPanel>
                                            </GroupBox>
                                        </WrapPanel>
                                    </GroupBox>
                                </WrapPanel>
                            </ScrollViewer>
                        </DockPanel>
                    </TabItem>
                    <TabItem  Header="Twitch"  DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" >
                        <TabItem.Resources>
                            <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
                                <Setter Property="Width" Value="120" />
                            </Style>
                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                                <Setter Property="Width" Value="250" />
                                <Setter Property="Height" Value="Auto" />
                                <Setter Property="TextWrapping" Value="Wrap" />
                            </Style>
                        </TabItem.Resources>

                        <DockPanel LastChildFill="False">
                            <StackPanel DockPanel.Dock="Top">
                                <ToggleButton x:Name="ToggleButton_TwitchToken" Width="100" Height="36" IsChecked="{Binding TwitchTokenUseAuth}"
                                              DataContext="{Binding Source={x:Static s:Settings.Default}}" 
                                    Click="ToggleButton_ChooseTwitchAuth_Click" ClickMode="Press" Style="{StaticResource ToggleButtonTwitchTokenSelecter}"/>
                            </StackPanel>

                            <ScrollViewer x:Name="ScrollViewer_TwitchTokenForm" DockPanel.Dock="Left" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                                <WrapPanel Orientation="Vertical">

                                    <StackPanel x:Name="StackPanel_TwitchTokenFlow" Visibility="Collapsed">
                                        <DockPanel LastChildFill="False">

                                            <TextBlock DockPanel.Dock="Top" Foreground="Red" HorizontalAlignment="Center">
                                                If you used the automatic refresh token (other page), you will need to re-enter tokens on this page.
                                            </TextBlock>
                                            <TextBlock DockPanel.Dock="Top" Foreground="Red" HorizontalAlignment="Center">Please provide feedback if you have any ideas how better to present this page.</TextBlock>

                                            <Expander DockPanel.Dock="Top" IsExpanded="{Binding ExpanderCredentialsHelp, Mode=OneWay}" ScrollViewer.CanContentScroll="True" MinWidth="300" Width="Auto" MaxHeight="200">
                                                <Expander.Header>
                                                    <TextBlock Text="{DynamicResource CredentialsHeader}"/>
                                                </Expander.Header>
                                                <FlowDocumentScrollViewer Margin="10" VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True">
                                                    <FlowDocument FontSize="12" PagePadding="5" >
                                                        <Section>
                                                            <Paragraph>
                                                                <Run Text="{DynamicResource CredentialsIntro}"/>
                                                                <LineBreak/>
                                                                <LineBreak/>
                                                                <Run Text="{DynamicResource CredentialsSettings}"/>
                                                            </Paragraph>
                                                            <Paragraph>
                                                                <Run Text="{DynamicResource CredentialsOAuth}"/>
                                                                <LineBreak />

                                                                <LineBreak />
                                                                <Run Text="{DynamicResource CredentialsOAuthManual}"/>
                                                            </Paragraph>
                                                        </Section>
                                                        <Section>
                                                            <List>
                                                                <ListItem>
                                                                    <Paragraph>
                                                                        <Run Text="{DynamicResource CredentialsBotAccount}" />
                                                                    </Paragraph>
                                                                </ListItem>
                                                                <ListItem>
                                                                    <Paragraph>
                                                                        <Run Text="{DynamicResource CredentialsVisit}"/>
                                                                        <InlineUIContainer>
                                                                            <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" Text="{DynamicResource CredentialsLinkTwitchConsole}"/>
                                                                        </InlineUIContainer>
                                                                        <Run Text="{DynamicResource CredentialsTwitchAppRegister}"/>
                                                                    </Paragraph>
                                                                    <List>
                                                                        <ListItem>
                                                                            <Paragraph>
                                                                                <Run Text="{DynamicResource CredentialsTwitchAppName}"/>
                                                                            </Paragraph>
                                                                        </ListItem>
                                                                        <ListItem>
                                                                            <Paragraph>
                                                                                <Run Text="Add:"/>
                                                                                <LineBreak />
                                                                                <InlineUIContainer>
                                                                                    <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" Text="{DynamicResource CredentialsLinkTwitchTokenGen}"/>
                                                                                </InlineUIContainer>
                                                                                <Run Text="{DynamicResource CredentialsTwitchAcctOAuthRedirect}"/>
                                                                            </Paragraph>
                                                                        </ListItem>
                                                                        <ListItem>
                                                                            <Paragraph>
                                                                                <Run Text="{DynamicResource CredentialsTwitchAppCreate}"/>
                                                                            </Paragraph>
                                                                        </ListItem>
                                                                        <ListItem>
                                                                            <Paragraph>
                                                                                <Run Text="{DynamicResource CredentialsTwitchClientId}"/>
                                                                            </Paragraph>
                                                                        </ListItem>
                                                                    </List>
                                                                </ListItem>
                                                                <ListItem>
                                                                    <Paragraph>
                                                                        <Run Text="{DynamicResource CredentialsAccessTokens}"/>
                                                                        <InlineUIContainer>
                                                                            <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" Text="{DynamicResource CredentialsLinkTwitchTokenGen}"/>
                                                                        </InlineUIContainer>
                                                                    </Paragraph>
                                                                    <List>
                                                                        <ListItem>
                                                                            <Paragraph>
                                                                                <Run Text="{DynamicResource CredentialsTwitchPasteClientId}"/>
                                                                                <Italic>
                                                                                    <Run Text="{DynamicResource CredentialsLinkTwitchConsole}"/>
                                                                                </Italic>
                                                                                <Run Text=" ."/>
                                                                            </Paragraph>
                                                                        </ListItem>
                                                                        <ListItem>
                                                                            <Paragraph>
                                                                                <Run Text="{DynamicResource CredentialsTwitchPasteScopes}"/>
                                                                                <LineBreak />
                                                                                <Rectangle Width="400" Height="3" HorizontalAlignment="Center" />
                                                                                <InlineUIContainer>
                                                                                    <StackPanel x:Name="Help_TwitchBot_DiffAuthScopes_Bot">
                                                                                        <Label Width="Auto">Bot account not equal to Streamer Channel - Bot Token Scopes</Label>
                                                                                        <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" TextWrapping="Wrap" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"
                                                                                 DataContext=""
                                                                            Text="{Binding Mode=OneWay, Source={x:Static StaticLib:OptionFlags.CredentialsTwitchScopesDiffOauthBot}}"/>
                                                                                    </StackPanel>
                                                                                </InlineUIContainer>
                                                                                <InlineUIContainer>
                                                                                    <StackPanel x:Name="Help_TwitchBot_DiffAuthScopes_Streamer">
                                                                                        <Label Width="Auto">Bot account not equal to Streamer Channel - Streamer Token Scopes</Label>
                                                                                        <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" TextWrapping="Wrap" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" 
                                                                                 DataContext=""
                                                                                 Text="{Binding Mode=OneWay, Source={x:Static  StaticLib:OptionFlags.CredentialsTwitchScopesDiffOauthChannel}}"/>
                                                                                    </StackPanel>
                                                                                </InlineUIContainer>
                                                                                <InlineUIContainer>
                                                                                    <StackPanel x:Name="Help_TwitchBot_SameAuthScopes">
                                                                                        <Label Width="Auto">Bot account and Streamer Channel account the same - Token Scopes</Label>
                                                                                        <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" TextWrapping="Wrap" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"
                                                                                 DataContext=""
                                                                            Text="{Binding Mode=OneWay, Source={x:Static  StaticLib:OptionFlags.CredentialsTwitchScopesOauthSame}}"/>
                                                                                    </StackPanel>
                                                                                </InlineUIContainer>
                                                                                <Rectangle Width="400" Height="3" HorizontalAlignment="Center" />
                                                                                <LineBreak />
                                                                                <Run Text="{DynamicResource CredentialsTwitchScopesExplained}"/>
                                                                            </Paragraph>
                                                                        </ListItem>
                                                                        <ListItem>
                                                                            <Paragraph>
                                                                                <Run Text="{DynamicResource CredentialsTwitchAcctConnectClientIds}"/>
                                                                            </Paragraph>
                                                                        </ListItem>
                                                                        <ListItem>
                                                                            <Paragraph>
                                                                                <Run Text="{DynamicResource CredentialsTwitchRefreshDate}"/>
                                                                            </Paragraph>
                                                                        </ListItem>
                                                                    </List>
                                                                </ListItem>
                                                            </List>
                                                        </Section>
                                                    </FlowDocument>
                                                </FlowDocumentScrollViewer>

                                            </Expander>


                                            <GroupBox x:Name="GroupBox_Twitch_BotCredentials" Header="Bot Account" Width="410">
                                                <StackPanel>
                                                    <TextBlock x:Uid="ExpiredToken" x:Name="TextBlock_ExpiredCredentialsMsg" Foreground="#FFF71553" FontSize="18" HorizontalAlignment="Center" MaxWidth="550" TextAlignment="Center" Visibility="Collapsed" Text="{DynamicResource ExpiredToken}" />
                                                    <StackPanel Orientation="Horizontal" Margin="10">

                                                        <Label Content="Channel Name" />
                                                        <TextBox x:Name="TB_Twitch_Channel" Text="{Binding TwitchChannelName}"  PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" SourceUpdated="TextBox_SourceUpdated"   TargetUpdated="TextBox_TwitchChannelBotNames_TargetUpdated" />
                                                    </StackPanel>
                                                    <StackPanel Orientation="Horizontal" Margin="10,0">
                                                        <Label Content="Token Scope" />
                                                        <TextBox x:Name="TextBox_TwitchScopesDiffOauthBot" BorderBrush="Blue" BorderThickness="1" IsReadOnly="True" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" SourceUpdated="TextBox_SourceUpdated" DataContext="" Text="{Binding Mode=OneWay, Source={x:Static  StaticLib:OptionFlags.CredentialsTwitchScopesDiffOauthBot}}" />
                                                        <TextBox x:Name="TextBox_TwitchScopesOauthSame" BorderBrush="Blue" BorderThickness="1" IsReadOnly="True" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" Visibility="Collapsed" SourceUpdated="TextBox_SourceUpdated" DataContext="" Text="{Binding Mode=OneWay, Source={x:Static  StaticLib:OptionFlags.CredentialsTwitchScopesOauthSame}}" />

                                                    </StackPanel>
                                                    <TextBlock Width="300" Text="* This Chat Bot only supports communicating to one channel through the Channel Name." TextWrapping="Wrap" FontSize="8" FontStretch="SemiCondensed" />
                                                    <StackPanel Orientation="Horizontal" Margin="10">
                                                        <Label Content="Bot User Name" />
                                                        <TextBox x:Name="TB_Twitch_BotUser" Text="{Binding TwitchBotUserName, Mode=TwoWay}"  PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" SourceUpdated="TextBox_SourceUpdated"  TargetUpdated="TextBox_TwitchChannelBotNames_TargetUpdated" />
                                                    </StackPanel>
                                                    <StackPanel Orientation="Horizontal" Margin="10">
                                                        <Button x:Name="Btn_Twitch_RefreshDate" Content="Refresh Due Date" Width="110" ToolTip="Click this button to set a 60 day due date from today, to show when the 'access token' needs refreshed." Click="RefreshButton_Click" LostFocus="Settings_LostFocus" />
                                                        <Label x:Name="Label_Twitch_RefreshDate" Width="Auto" Content="{Binding TwitchRefreshDate, FallbackValue=1/1/1900, Mode=TwoWay, StringFormat=MM/dd/yyyy}"  />
                                                    </StackPanel>
                                                    <Expander x:Name="Expander_Credentials" ExpandDirection="Down" IsExpanded="False">
                                                        <Expander.Header>
                                                            <TextBlock Text="Credentials (Click me)" />
                                                        </Expander.Header>
                                                        <StackPanel>
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <Label Content="Client Id" />
                                                                <TextBox x:Name="TB_Twitch_ClientID" Text="{Binding TwitchClientID, Mode=TwoWay}" ToolTip="The client ID for the bot user account." PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" SourceUpdated="TextBox_SourceUpdated"  TargetUpdated="TextBox_SourceUpdated" />
                                                            </StackPanel>
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <Label Content="Access OAuth Token" />
                                                                <TextBox x:Name="TB_Twitch_AccessToken" Text="{Binding TwitchAccessToken, Mode=TwoWay}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" SourceUpdated="TextBox_SourceUpdated"  TargetUpdated="TextBox_SourceUpdated" />
                                                            </StackPanel>
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <Label Content="Refresh Token"  />
                                                                <TextBox x:Name="TB_Twitch_RefreshToken" Text="{Binding TwitchRefreshToken, Mode=TwoWay}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" SourceUpdated="TextBox_SourceUpdated"  TargetUpdated="TextBox_SourceUpdated" />
                                                            </StackPanel>

                                                        </StackPanel>
                                                    </Expander>
                                                </StackPanel>
                                            </GroupBox>
                                            <GroupBox x:Name="GroupBox_Twitch_AdditionalStreamerCredentials" Header="Streamer Channel Credentials" Visibility="Collapsed" Width="410">
                                                <StackPanel>
                                                    <TextBlock Text="{DynamicResource CredentialsTwitchExplainSameChannel}" Width="400" TextWrapping="Wrap"/>
                                                    <StackPanel Orientation="Horizontal" Margin="10">
                                                        <TextBlock x:Uid="ExpiredToken" x:Name="TextBlock_ExpiredStreamerCredentialsMsg" Foreground="#FFF71553" FontSize="18" HorizontalAlignment="Center" MaxWidth="550" TextAlignment="Center" Visibility="Collapsed" Text="{DynamicResource ExpiredToken}" />
                                                        <Button x:Name="Btn_Twitch_RefreshDate_Streamer" Content="Refresh Due Date" Width="110" ToolTip="Click this button to set a 60 day due date from today, to show when the 'access token' needs refreshed." Click="RefreshStreamButton_Click" LostFocus="Settings_LostFocus" />
                                                        <Label x:Name="Label_Twitch_StreamerRefreshDate" Width="Auto" Content="{Binding TwitchStreamerTokenDate, FallbackValue=1/1/1900, Mode=TwoWay, StringFormat=MM/dd/yyyy}" />
                                                    </StackPanel>
                                                    <TextBlock>Current Bot Features requiring same {Bot and Streamer} Client ID</TextBlock>
                                                    <ListBox ItemsSource="{DynamicResource CredentialsTwitchStreamerFeatures}" />
                                                    <Expander>
                                                        <Expander.Header>
                                                            <TextBlock>
                                                        Streamer Channel Specific Credentials (Click Me)
                                                            </TextBlock>
                                                        </Expander.Header>
                                                        <StackPanel>
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <Label Content="Client Id:"/>
                                                                <TextBox TextWrapping="Wrap" Text="{Binding TwitchStreamClientId, Mode=TwoWay}"  PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" ToolTip="Client Id - saved in the settings. Bot uses the streamer channel defined in 'Channel Name'." SourceUpdated="TextBox_SourceUpdated" />
                                                            </StackPanel>
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <Label Content="Token Scope" />
                                                                <TextBox BorderBrush="Blue" BorderThickness="1" SourceUpdated="TextBox_SourceUpdated" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"                                                                        Text="{x:Static StaticLib:OptionFlags.CredentialsTwitchScopesDiffOauthChannel}" />
                                                            </StackPanel>
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <Label Content="Access OAuth Token"/>
                                                                <TextBox TextWrapping="Wrap" Text="{Binding TwitchStreamOauthToken, Mode=TwoWay}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" SourceUpdated="TextBox_SourceUpdated" />
                                                            </StackPanel>
                                                        </StackPanel>
                                                    </Expander>
                                                </StackPanel>
                                            </GroupBox>

                                        </DockPanel>
                                    </StackPanel>

                                    <StackPanel x:Name="StackPanel_TwitchAuthCodeFlow" Visibility="Visible">
                                        <DockPanel LastChildFill="False">

                                            <Expander IsExpanded="{Binding ExpanderCredentialsHelp, Mode=OneWay}" DockPanel.Dock="Left" MinWidth="300" Width="Auto" ScrollViewer.CanContentScroll="True">
                                                <Expander.Header>
                                                    <TextBlock>Authorization Code Token Flow</TextBlock>
                                                </Expander.Header>
<FlowDocumentScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Height="522">
                                                    <FlowDocument>
                                                        <Paragraph>
                                                            This bot performs tasks on behalf of the streamer. A 
    moderator level bot account can perform many tasks for the 
    streamer, including chat message responses. It is possible 
    to have a bot account perform most of 
    the tasks, and also utilize streamer account access 
    credentials to perform the additional tasks.
                                                        </Paragraph>
                                                        <Paragraph>
                                                            Before continuing, consider whether to attach this bot to 
    the streamer account or use a (recommended) separate bot account.
                                                            <LineBreak/>
                                                            For using a separate bot account, type the streamer account 
    name in the "Channel Name" box, and the bot account name in the 
    "Bot User Name" box.
                                                        </Paragraph>
                                                        <Paragraph>
                                                            This token flow for accessing Twitch is more simplified than 
    the user method. This flow requires registering the bot,
                                                            <LineBreak /> at

                                                            <InlineUIContainer>
                                                                <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" Text="{DynamicResource CredentialsLinkTwitchConsole}"/>
                                                            </InlineUIContainer>
                                                            <LineBreak /> ,
    for a Client Id and Client Secret, with
                                                            <LineBreak />
                                                            this "Redirect URL" (add to the Twitch Console registered application entry):
                                                            <InlineUIContainer>
                                                                <TextBox Padding="2" IsReadOnly="True"  BorderBrush="Blue" BorderThickness="1" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"  Text="{x:Static StaticLib:OptionFlags.TwitchAuthRedirectURL}"/>
                                                            </InlineUIContainer>
                                                            <LineBreak />
                                                            and approving the application for an authorization code.
                                                        </Paragraph>
                                                        <Paragraph>
                                                            To authorize the application:
                                                            <LineBreak />
                                                            In the "Bot Account Info" box, expand it and determine whether you want to use the built-in web browser for the application (checked box) or your default browser (unchecked box). 
                                                                Then, click the "Authorize Bot Token" button. This will open a browser window to authorize the access, either in the application
                                                                browser or default browser. You may need to change the current account (look at the top for 'sign out, change accounts) for the authorization - the Twitch authorization screen doesn't 
                                                                adapt to the account associated with the authorization. Meaning-if you are authorizing the bot access, your browser/Twitch may
                                                                prompt you to authorize the application with your streamer account (current login).
                                                            <LineBreak />
                                                            The browser will go to a blank looking or broken looking webpage. This is alright. The application intercepted the response from Twitch to save the provided access code, the user doesn't need to manually paste them.
                                                            <LineBreak />
                                                            From here on out, the user just pasted 'client Id' and 'client Secret' for each account and will not have to paste any more data for approving the application; occassionally performing the Twitch login and authorization application access.
                                                        </Paragraph>
                                                        <Paragraph>
                                                            Note: if you click 'authorize account' multiple times and open several browser windows, only use the latest browser or the authorization will fail to get recongnized in this application. (You could have a 2 browser windows open, one for streamer account authorization and another for bot account authorization, so long as you use the latest window). The 'latest' window is due to each time the user clicks the "Authorize Account" button, the application generates a new "state" token for sending to Twitch, and Twitch returns "state" with the authorization to ensure there is no impersonation. When creating several windows, the application saves the last created 'state token' and will only register the last received authorization.
                                                            <LineBreak />
                                                            If you're using a separate bot account alongside your streamer account, perform this same procedure for the streamer account box.
                                                        </Paragraph>
                                                        <Paragraph>
                                                            The bot will save each authentication code from the "authorized access" form Twitch provides to obtain a refresh token, and continually 
    retrieves a new access token, once the access token 
    expires. This occurs for the bot account and also a 
    streamer account, if you choose to seaparate the accesses.
                                                        </Paragraph>
                                                        <Paragraph>
                                                            <Run Foreground="{StaticResource BrightStop}">Filling in the client Ids and client secrets in both boxes, then authorizing may show a warning statusbar the other account isn't authorized. It's okay to continue authorizing one account then the other. The statusbar will
                                                                also show if something happens to the authorization and requires the user to re-authorize the application access.</Run>
                                                        </Paragraph>
                                                        <Paragraph>
                                                            Note: The tokens expire for the associated account, if:
                                                        </Paragraph>
                                                        <List>
                                                            <ListItem>
                                                                <Paragraph>The user changes the password, or</Paragraph>
                                                            </ListItem>
                                                            <ListItem>
                                                                <Paragraph>Disconnects the app connection, via Twitch settings.</Paragraph>
                                                            </ListItem>
                                                        </List>
                                                        <Paragraph>
                                                            From time to time, this bot may add or remove features and changes the access scope. Be sure to look at the 
                                                                release notes if the access scopes changed. This means the user will need to reauthorize the beat and/or streamer access
                                                                again; otherwise, the tokens may fail during a live stream!
                                                            <LineBreak />
                                                            If you need to re-authorize the access and the buttons appear locked, click the "Force Re-Authorization" button to
                                                                manually reset the authorization; and the authorization buttons will be ready to click.
                                                        </Paragraph>
                                                    </FlowDocument>
                                                </FlowDocumentScrollViewer>
                                            </Expander>

<WrapPanel DockPanel.Dock="Left" Orientation="Vertical">
                                                <GroupBox Header="Channel Information" Width="410">
                                                    <StackPanel Orientation="Vertical" Margin="10">
                                                        <StackPanel Orientation="Horizontal" Margin="10">

                                                            <TextBlock Width="100">Channel Name:</TextBlock>
                                                            <TextBox Height="22" Text="{Binding TwitchChannelName}" SourceUpdated="TextBox_SourceUpdated" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" TargetUpdated="TextBox_TwitchChannelBotNames_TargetUpdated" />

                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Margin="10">
                                                            <TextBlock Width="100">Bot User Name:</TextBlock>
                                                            <TextBox Text="{Binding TwitchBotUserName}" SourceUpdated="TextBox_SourceUpdated"   TargetUpdated="TextBox_TwitchChannelBotNames_TargetUpdated" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" />
                                                        </StackPanel>
                                                    </StackPanel>
                                                </GroupBox>
                                                <Button Content="Force Re-Authorization" Width="150" Margin="10" IsEnabled="True" Click="Button_TwitchAuthToken_ReAuthorize" />
                                                <GroupBox Header="Bot Account Info" Width="410">
                                                    <Expander x:Name="Expander_CredentialsAuthBot" ExpandDirection="Down" IsExpanded="False">
                                                        <Expander.Header>
                                                            <TextBlock>Hidden for privacy</TextBlock>
                                                        </Expander.Header>
                                                        <StackPanel Orientation="Vertical" Margin="10">
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <TextBlock Width="90">Client Id:</TextBlock>
                                                                <TextBox Text="{Binding TwitchAuthClientId}" SourceUpdated="TextBox_SourceUpdated"  TargetUpdated="TextBox_SourceUpdated" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" />
                                                            </StackPanel>
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <TextBlock Width="90">Client Secret:</TextBlock>
                                                                <TextBox Text="{Binding TwitchAuthBotClientSecret}" SourceUpdated="TextBox_SourceUpdated"  TargetUpdated="TextBox_SourceUpdated" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" />
                                                            </StackPanel>
                                                            <CheckBox IsChecked="{Binding TwitchAuthUseInternalBrowser}">
                                                                <CheckBox.ToolTip>
                                                                    <TextBlock>Checking this box will use this application's web browser (MSEdge), or unchecked will open your default browser.</TextBlock>
                                                                </CheckBox.ToolTip>
                                                                <TextBlock>Use App web browser for authentication.</TextBlock>
                                                            </CheckBox>
                                                            <Button x:Name="Twitch_AuthCode_Button_AuthorizeBot" Content="Authorize Bot Token" Width="160" Margin="5"
                                                            Click="Button_TwitchAuthCode_ApproveBotURL" />
                                                        </StackPanel>
                                                    </Expander>
                                                </GroupBox>
                                                <GroupBox x:Name="Twitch_AuthCode_GroupBox_StreamerInfo" Header="Streamer Account Info"                              Width="410">
                                                    <Expander x:Name="Expander_CredentialsAuthStreamer" ExpandDirection="Down" IsExpanded="False">
                                                        <Expander.Header>
                                                            <TextBlock>Hidden for privacy</TextBlock>
                                                        </Expander.Header>
                                                        <StackPanel Orientation="Vertical" Margin="10">
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <TextBlock Width="90">Client Id:</TextBlock>
                                                                <TextBox Text="{Binding TwitchAuthStreamerClientId}" SourceUpdated="TextBox_SourceUpdated" TargetUpdated="TextBox_SourceUpdated" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" />
                                                            </StackPanel>
                                                            <StackPanel Orientation="Horizontal" Margin="10">
                                                                <TextBlock Width="90">Client Secret:</TextBlock>
                                                                <TextBox Text="{Binding TwitchAuthStreamerClientSecret}" SourceUpdated="TextBox_SourceUpdated"  TargetUpdated="TextBox_SourceUpdated" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" />
                                                            </StackPanel>
                                                            <CheckBox IsChecked="{Binding TwitchAuthUseInternalBrowser}">
                                                                <CheckBox.ToolTip>
                                                                    <TextBlock>Checking this box will use this application's web browser (MSEdge), or unchecked will open your default browser.</TextBlock>
                                                                </CheckBox.ToolTip>
                                                                <TextBlock>Use App web browser for authentication.</TextBlock>
                                                            </CheckBox>
                                                            <Button x:Name="Twitch_AuthCode_Button_AuthorizeStreamer" Content="Authorize Streamer Token" Width="160" Margin="5"
                                                             Click="Button_TwitchAuthCode_ApproveStreamerURL" />
                                                        </StackPanel>
                                                    </Expander>
                                                </GroupBox>
                                            </WrapPanel>
                                        </DockPanel>
                                    </StackPanel>

                                </WrapPanel>
                            </ScrollViewer>


                            <GroupBox Header="Settings" Width="320" Height="Auto" DockPanel.Dock="Right">
                                <StackPanel HorizontalAlignment="Left">
                                    <GroupBox Header="Setup Follower Operations" Width="Auto">
                                        <StackPanel>
                                            <StackPanel Orientation="Horizontal">
                                                <Label Width="Auto" Content="Seconds between checking for new follows:"/>
                                                <Label Width="Auto" Content="{Binding Value, ElementName=Slider_TimeFollowerPollSeconds}" />
                                            </StackPanel>
                                            <Slider x:Name="Slider_TimeFollowerPollSeconds" Height="40" Width="Auto" AutoToolTipPlacement="TopLeft" Interval="1" TickPlacement="Both" ToolTip="Choose how often, in seconds, to check for new followers. Smaller values increases traffic to your channel." Value="{Binding TwitchFrequencyFollow, Mode=TwoWay}" Maximum="300" Minimum="5" SmallChange="1" SelectionStart="5" SelectionEnd="300" Margin="10,0" IsSnapToTickEnabled="True" LostFocus="Settings_LostFocus" LargeChange="50" TickFrequency="5" />
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Setup Clip Operations" Width="Auto">
                                        <StackPanel>
                                            <StackPanel Orientation="Horizontal">
                                                <Label Width="Auto" Content="Seconds between checking for new follows:"/>
                                                <Label Width="Auto" Content="{Binding Value, ElementName=Slider_TimeClipPollSeconds}" />
                                            </StackPanel>
                                            <Slider x:Name="Slider_TimeClipPollSeconds" Height="40" Width="Auto" AutoToolTipPlacement="TopLeft" Interval="1" TickPlacement="Both" ToolTip="Choose how often, in seconds, to check for new clips. Smaller values increases traffic to your channel." Value="{Binding TwitchFrequencyClipTime, Mode=TwoWay}" Maximum="1200" Minimum="5" SmallChange="1" SelectionStart="0" SelectionEnd="1200" Margin="10,0" IsSnapToTickEnabled="True" LostFocus="Settings_LostFocus" LargeChange="50" TickFrequency="5"  />
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Setup Go-Live Notifications" Width="Auto">
                                        <StackPanel>
                                            <StackPanel Orientation="Horizontal">
                                                <Label Width="Auto" Content="Seconds between checking for going live: " />
                                                <Label Width="Auto" Content="{Binding Value, ElementName=Slider_TimeGoLivePollSeconds}" />
                                            </StackPanel>
                                            <Slider x:Name="Slider_TimeGoLivePollSeconds" Height="40" Width="Auto" 
                                                    AutoToolTipPlacement="TopLeft" Interval="1" TickPlacement="Both" 
                                                    ToolTip="Choose how often, in seconds, to check for a change in channel 
                                                    state: going live, updated stream, and going offline. Smaller values increases 
                                                    traffic to your channel." Value="{Binding TwitchGoLiveFrequency, Mode=TwoWay}" 
                                                    Maximum="3600" Minimum="0" 
                                                    SmallChange="5" SelectionStart="5" SelectionEnd="3600" 
                                                    Margin="10,0" IsSnapToTickEnabled="True" 
                                                    LostFocus="Settings_LostFocus" LargeChange="50" TickFrequency="10"  />
                                        </StackPanel>
                                    </GroupBox>
                                </StackPanel>
                            </GroupBox>

                        </DockPanel>

                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Options" x:Name="TabItem_DataOptions" >
                <TabItem.Resources>
                    <Style TargetType="{x:Type StackPanel}">
                        <Setter Property="Margin" Value="5" />
                    </Style>
                </TabItem.Resources>
                <TabControl DataContext="{Binding Source={x:Static s:Settings.Default}}">
                    <TabItem Header="Theme">
                        <ScrollViewer>
                            <DockPanel>
                                <WrapPanel Orientation="Vertical" DockPanel.Dock="Left">
                                    <GroupBox Header="Select App Theme">
                                        <StackPanel Orientation="Vertical">
                                            <RadioButton IsChecked="{Binding ThemeLight}" Checked="RadioButton_Theme_Checked">
                                                <TextBlock>Light Theme</TextBlock>
                                            </RadioButton>
                                            <RadioButton IsChecked="{Binding ThemeDark}" Checked="RadioButton_Theme_Checked">
                                                <TextBlock>Dark Theme</TextBlock>
                                            </RadioButton>
                                        </StackPanel>
                                    </GroupBox>
                                </WrapPanel>
                            </DockPanel>
                        </ScrollViewer>
                    </TabItem>
                    <TabItem Header="Streamer Bot">
                        <ScrollViewer ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Auto">
                            <DockPanel Margin="10" ScrollViewer.CanContentScroll="True">
                                <WrapPanel Orientation="Vertical" DockPanel.Dock="Left">
                                    <GroupBox Header="Bot Management - Debug Mode" Width="auto" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                        <DockPanel>
                                            <TextBlock DockPanel.Dock="Top" Margin="0,0,0,5">Log the following functionality:</TextBlock>
                                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" HorizontalAlignment="Center" Margin="0,0,0,5">
                                                <Button Content="Enable All" Margin="3,0" Click="Button_OptionsDebugLog_EnableAll_Click" />
                                                <Button Content="Disable All" Margin="3,0" Click="Button_OptionsDebugLog_DisableAll_Click" />
                                            </StackPanel>
                                            <TextBlock DockPanel.Dock="Top" TextWrapping="Wrap" Width="220" Foreground="{StaticResource BrightStop}" Text="Caution-logging with these options can create a significant log file, and should be used sparingly or to track issues. Useful to include in debug/issue reports." />
                                            <ListBox DataContext="{StaticResource DebugFlags}" ItemsSource="{Binding DebugFlagsList}" />
                                        </DockPanel>
                                    </GroupBox>

                                    <GroupBox Header="Bot Management - App Interface">
                                        <StackPanel>
                                            <CheckBox IsChecked="{Binding PostMultiLive}">
                                                <TextBlock>Enable posting to social media (e.g. Discord) multiple live messages in same day.</TextBlock>
                                            </CheckBox>

                                            <CheckBox x:Name="CheckBox_Debug_Livestream" IsChecked="{Binding DebugLiveStream}" Checked="CheckDebug" Unchecked="CheckDebug">
                                                <TextBlock>Enable Livestream debug buttons.</TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding ManageClearButtonEnabled}" Checked="SetVisibility" Unchecked="SetVisibility">
                                                <CheckBox.ToolTip>
                                                    <TextBlock>This should mitigate accidental button clicks on the GUI when moving the mouse around, e.g. during a live stream.</TextBlock>
                                                </CheckBox.ToolTip>
                                                <TextBlock>Enable 'Clear Data' buttons.</TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding EnableManageDataOptions}" Checked="SetVisibility" Unchecked="SetVisibility">
                                                <CheckBox.ToolTip>
                                                    Shows or Hides "Data Management" options to prevent accidental clicking.
                                                </CheckBox.ToolTip>
                                                <TextBlock>Enable "Data Management" Options</TextBlock>
                                            </CheckBox>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Bot Management - Tabs">
                                        <StackPanel>
                                            <TextBlock Text="Enable width-based tab config for data tables. Enter width in pixels." />
                                            <CheckBox x:Name="CheckBox_Option_TabUserFollow" IsChecked="{Binding GridTabifyUserFollow}" 
                                                      VerticalContentAlignment="Center" 
                                                      Checked="CheckBox_TabifySettings_Clicked" 
                                                      Unchecked="CheckBox_TabifySettings_Clicked">
                                                <CheckBox.ToolTip>
                                                    <TextBlock>When the application width decreases too much, the User Follow listing is hard to read. This 
                                                            option enables the tab to be reconfigured when the width is decreased.</TextBlock>
                                                </CheckBox.ToolTip>
                                                <StackPanel Orientation="Horizontal">
                                                    <TextBlock>UserData User Follow</TextBlock>
                                                    <TextBox HorizontalAlignment="Left" Text="{Binding GridTabifyUserFollowWidth}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" Width="45"/>
                                                </StackPanel>

                                            </CheckBox>

                                            <CheckBox x:Name="CheckBox_Option_TabStreamRaids" IsChecked="{Binding GridTabifyStreamRaids}" 
                                                      VerticalContentAlignment="Center" 
                                                      Checked="CheckBox_TabifySettings_Clicked" 
                                                      Unchecked="CheckBox_TabifySettings_Clicked">
                                                <CheckBox.ToolTip>
                                                    <TextBlock>When the application width decreases too much, the Incoming and Outgoing raid listing is hard to read. This 
                                                            option enables the tab to be reconfigured when the width is decreased.</TextBlock>
                                                </CheckBox.ToolTip>
                                                <StackPanel Orientation="Horizontal">
                                                    <TextBlock>Stream In Out Raids</TextBlock>
                                                    <TextBox HorizontalAlignment="Left" Text="{Binding GridTabifyStreamRaidsWidth}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" Width="45"/>
                                                </StackPanel>

                                            </CheckBox>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Media Overlay">
                                        <StackPanel>
                                            <Label>
                                                <TextBlock>Clicking Enable will start a new Process for the Media Overlay Server</TextBlock>
                                            </Label>
                                            <CheckBox x:Name="CheckBox_MediaOverlay_Enable" IsChecked="{Binding MediaOverlayEnabled}" Checked="CheckBox_Checked_PanelVisibility" Unchecked="CheckBox_Checked_PanelVisibility">
                                                <TextBlock>Enable Media Overlay</TextBlock>
                                            </CheckBox>
                                            <StackPanel x:Name="StackPanel_MediaOverlay_MediaOptions" Visibility="Collapsed" Loaded="CheckBox_Checked_PanelVisibility" Margin="0,0,0,0">
                                                <CheckBox IsChecked="{Binding MediaOverlayChannelPoints}" >
                                                    <CheckBox.ToolTip>The PubService bot must have 'Monitor Channel Points' service and bot started to enable this feature.</CheckBox.ToolTip>
                                                    <TextBlock>Enable Monitor Channel Points</TextBlock>
                                                </CheckBox>
                                                <CheckBox IsChecked="{Binding MediaOverlayShoutoutClips}" Visibility="Collapsed">
                                                    <CheckBox.ToolTip>For an Overlay Service Shout-Out event, use a random clip from their channel as part of the overlay notification. Twitch currently requires SSL certs for embed videos and a domain name. Disabled for unavailable features.</CheckBox.ToolTip>
                                                    <TextBlock>Enable for shout-outs using a random clip from user's channel</TextBlock>
                                                </CheckBox>
                                            </StackPanel>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Currency System">
                                        <StackPanel>
                                            <CheckBox IsChecked="{Binding CurrencyStart, Mode=TwoWay}">
                                                <TextBlock>Enable Currency Accrual - still permits adding currencies</TextBlock>
                                            </CheckBox>
                                            <CheckBox x:Name="CheckBox_CurrencyOnline" IsChecked="{Binding CurrencyOnline, Mode=TwoWay}" Visibility="Collapsed">
                                                <TextBlock>Enable Currency Accrual only when Streaming Online</TextBlock>
                                            </CheckBox>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Welcome Viewers">
                                        <StackPanel>
                                            <Label Content="Only once per user per active stream (no repeats)" />
                                            <RadioButton IsChecked="{Binding WelcomeDisabled, Mode=TwoWay}">
                                                <TextBlock Text="{DynamicResource Disabled}" />
                                            </RadioButton>
                                            <RadioButton IsChecked="{Binding FirstUserJoinedMsg, Mode=TwoWay}">
                                                <TextBlock Text="Enable when viewer joins the channel" />
                                            </RadioButton>
                                            <RadioButton IsChecked="{Binding FirstUserChatMsg, Mode=TwoWay}">
                                                <TextBlock Text="Enable when a viewer first chats" />
                                            </RadioButton>
                                            <CheckBox IsChecked="{Binding MsgWelcomeStreamer, Mode=TwoWay}">
                                                <TextBlock Text="Enable welcome message when streamer chats" />
                                            </CheckBox>
                                            <Line Fill="Black" StrokeThickness="1" Stroke="Black" X2="200" HorizontalAlignment="Center" />
                                            <TextBlock Text="Customize Welcome Messages - Welcome New Viewer, Returning Viewer, and Followers/Subscribers" />
                                            <CheckBox IsChecked="{Binding WelcomeCustomMsg, Mode=TwoWay}">
                                                <TextBlock Text="Enable" />
                                            </CheckBox>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Bot Management - Output">
                                        <StackPanel>
                                            <CheckBox IsChecked="{Binding MsgBotConnection}">
                                                <TextBlock><Run Text="Enable bot welcome message when connected to stream channel."/></TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding MsgCommandNotFound}">
                                                <TextBlock><Run Text="Enable &quot;Command Not Found&quot; output message."/></TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding MsgSocialSeparate}" ToolTip="Using !socials, click to send each social message separately to chat.">
                                                <TextBlock><Run Text="Enable separate Social messages."/></TextBlock>
                                            </CheckBox>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Moderate Follows">
                                        <StackPanel>
                                            <CheckBox x:Name="CheckBox_ModFollower_BanEnable" IsChecked="{Binding TwitchFollowerAutoBanBots}" Checked="CheckBox_Checked_PanelVisibility" Unchecked="CheckBox_Checked_PanelVisibility">
                                                <StackPanel>
                                                    <TextBlock >
                                                        <TextBlock.TextDecorations>
                                                            <TextDecoration Location="Strikethrough"/>
                                                        </TextBlock.TextDecorations>Enable auto-banning Follow bots</TextBlock>
                                                    <TextBlock>
                                                            Currently sends "ban candidates" to the "Status Log" - to test and ensure real users are not accidentally banned.
                                                    </TextBlock>
                                                </StackPanel>
                                            </CheckBox>
                                            <StackPanel x:Name="StackPanel_ModerateFollowers_Count" Orientation="Vertical" Visibility="Hidden" Loaded="CheckBox_Checked_PanelVisibility">
                                                <TextBlock>When Follow-bot looks every N seconds, total new follows are detected at one time. A cluster can indicate a follow-bot attack (or you're very popular).</TextBlock>

                                                <StackPanel Orientation="Horizontal">
                                                    <Label>Choose (1 to 100):</Label>
                                                    <TextBox Width="40" Height="18" Text="{Binding TwitchFollowerAutoBanCount, Mode=TwoWay}" HorizontalContentAlignment="Center"  LostFocus="TextBox_Follower_LostFocus" 
                                                             PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" />
                                                </StackPanel>
                                                <Slider Value="{Binding TwitchFollowerAutoBanCount, Mode=TwoWay}" Maximum="100" Minimum="1" IsSnapToTickEnabled="True" IsSelectionRangeEnabled="True" SelectionEnd="1" SelectionStart="1" SmallChange="1" TickPlacement="Both" LargeChange="5" />
                                            </StackPanel>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Moderation Messages">
                                        <StackPanel>

                                            <GroupBox Header="Approval Request Expiration" Width="Auto">
                                                <StackPanel>
                                                    <StackPanel Orientation="Horizontal">
                                                        <Label VerticalContentAlignment="Center" Content="Expiration Minutes: "/>
                                                        <Label VerticalContentAlignment="Center" Content="{Binding Value, ElementName=Slider_ModApprovalTimeout}" />
                                                    </StackPanel>
                                                    <Slider x:Name="Slider_ModApprovalTimeout" Height="40" Width="Auto" AutoToolTipPlacement="TopLeft" Interval="1" 
                                                                TickPlacement="Both"
                                                                Value="{Binding ModeratorApprovalTimeout, Mode=TwoWay}" Maximum="60" Minimum="5" SmallChange="5" SelectionStart="5" SelectionEnd="60" Margin="5,0" IsSnapToTickEnabled="True" LostFocus="Settings_LostFocus" LargeChange="50" TickFrequency="5">
                                                        <Slider.ToolTip>
                                                            <TextBlock>
                                                                    On 'Data/Moderator/User Approve' tab, specify which commands or <LineBreak />
                                                                    channel points redemptions users can request moderator approval. <LineBreak />
                                                                    Specifically, actions that can modify bot data. Specify here how <LineBreak />
                                                                    many minutes should moderators have to approve the request. <LineBreak />
                                                                    After these specified minutes, the request will expire.
                                                            </TextBlock>
                                                        </Slider.ToolTip>
                                                    </Slider>
                                                </StackPanel>
                                            </GroupBox>

                                            <TextBlock>Currently not enabled-working on machine learning</TextBlock>
                                            <CheckBox IsChecked="{Binding ModerateUserLearnMsgs}">
                                                <TextBlock>The bot records chat messages to learn if messages are good or bad - bannable/timeout worthy.</TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding ModerateUsersWarn}">
                                                <TextBlock>Provide chat message of probable moderator action.</TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding ModerateUsersAction}">
                                                <TextBlock>The bot performs the moderation action</TextBlock>
                                            </CheckBox>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Automatic Commands by Timer">
                                        <StackPanel Margin="5">
                                            <CheckBox x:Name="CheckBox_RepeatCommands_Enable" IsChecked="{Binding RepeatTimerCommands, Mode=TwoWay}" Checked="CheckBox_Checked_PanelVisibility" Unchecked="CheckBox_Checked_PanelVisibility">
                                                <CheckBox.ToolTip>
                                                    <TextBlock>Add 'seconds' (whole number, e.g. 600) to the repeat timer column within the command list. Timer updates after the command runs.</TextBlock>
                                                </CheckBox.ToolTip>
                                                <TextBlock>Enable repeating commands.</TextBlock>
                                            </CheckBox>
                                            <StackPanel x:Name="StackPanel_RepeatCommands_RepeatOptions" Visibility="Collapsed" Loaded="CheckBox_Checked_PanelVisibility">
                                                <CheckBox IsChecked="{Binding RepeatWhenLive, Mode=TwoWay}" >
                                                    <TextBlock>Perform Repeat commands only when live.</TextBlock>
                                                </CheckBox>

                                                <GroupBox Header="Choose Repeater adjustment" Width="auto">
                                                    <StackPanel>
                                                        <RadioButton Name="RadioButton_RepeatTimer_NoAdjustment" Margin="1,4" IsChecked="{Binding RepeatNoAdjustment, Mode=TwoWay}" Checked="CheckBox_Checked_PanelVisibility" Unchecked="CheckBox_Checked_PanelVisibility">
                                                            <RadioButton.ToolTip>
                                                                <TextBlock>This option provides no restrictions to repeat timers, they run as is.</TextBlock>
                                                            </RadioButton.ToolTip>
                                                            <TextBlock>No adjustment to repeat timers.</TextBlock>
                                                        </RadioButton>
                                                        <RadioButton Name="RadioButton_RepeatTimer_SlowDownOption" Margin="1,4" IsChecked="{Binding RepeatTimerComSlowdown, Mode=TwoWay}" Checked="CheckBox_Checked_PanelVisibility" Unchecked="CheckBox_Checked_PanelVisibility">
                                                            <RadioButton.ToolTip>
                                                                <TextBlock>The repeating commands will slow down by up to 2x the specified time. The commands will return/unwind to normal speed when chat is very active. The specs for normal operation speed are about: at least 15+ viewers per half hour or over 20 viewer chats in 15 minutes.</TextBlock>
                                                            </RadioButton.ToolTip>
                                                            <TextBlock>Enable smart slow-down repeating commands</TextBlock>
                                                        </RadioButton>
                                                        <RadioButton x:Name="RadioButton_RepeatTimer_ThresholdOption" Margin="1,4" IsChecked="{Binding RepeatUseThresholds, Mode=TwoWay}" Checked="CheckBox_Checked_PanelVisibility" Unchecked="CheckBox_Checked_PanelVisibility">
                                                            <RadioButton.ToolTip>
                                                                <TextBlock>
                                                                        Select this option to prevent messages from sending if the stream doesn't meet the specified thresholds.
                                                                </TextBlock>
                                                            </RadioButton.ToolTip>
                                                            <StackPanel Margin="0">
                                                                <TextBlock>Use thresholds to only send messages when exceeding the criteria.</TextBlock>
                                                                <StackPanel Orientation="Vertical" Visibility="Collapsed" Name="StackPanel_Repeat_ThresholdsOptions" Loaded="CheckBox_Checked_PanelVisibility">
                                                                    <CheckBox Padding="0" Margin="0" IsChecked="{Binding RepeatAboveChatCount, Mode=TwoWay}">
                                                                        <CheckBox.ToolTip>Select to prevent messages when below chat count threshold.</CheckBox.ToolTip>
                                                                        <TextBlock>Chat Count</TextBlock>
                                                                    </CheckBox>
                                                                    <Label Margin="0">Inclusive Or</Label>
                                                                    <CheckBox Padding="0" Margin="0" IsChecked="{Binding RepeatAboveUserCount, Mode=TwoWay}">
                                                                        <CheckBox.ToolTip>Select to prevent messages when below user count threshold.</CheckBox.ToolTip>
                                                                        <TextBlock>User Count</TextBlock>
                                                                    </CheckBox>
                                                                </StackPanel>
                                                            </StackPanel>
                                                        </RadioButton>
                                                    </StackPanel>
                                                </GroupBox>
                                                <GroupBox x:Name="GroupBox_RepeatTimer_ThresholdOptions" Width="auto" Header="Adjustment Thresholds" Padding="0" Loaded="CheckBox_Checked_PanelVisibility" Visibility="Collapsed">
                                                    <StackPanel>
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="40" />
                                                                <ColumnDefinition Width="65" />
                                                                <ColumnDefinition Width="65" />
                                                            </Grid.ColumnDefinitions>
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="25" />
                                                                <RowDefinition Height="25" />
                                                                <RowDefinition Height="25" />
                                                            </Grid.RowDefinitions>
                                                            <Label Grid.Row="0" Grid.Column="1">
                                                                <TextBlock>Minutes</TextBlock>
                                                            </Label>
                                                            <Label Grid.Row="0" Grid.Column="2">
                                                                <TextBlock>Count</TextBlock>
                                                            </Label>
                                                            <Label Grid.Row="1" Grid.Column="0">
                                                                <TextBlock Padding="0">Chat</TextBlock>
                                                            </Label>
                                                            <Label Grid.Row="2" Grid.Column="0">
                                                                <TextBlock Padding="0">User</TextBlock>
                                                            </Label>
                                                            <TextBox Grid.Row="1" Grid.Column="1" Height="20" Width="50" Text="{Binding RepeatChatMinutes}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"/>
                                                            <TextBox Grid.Row="1" Grid.Column="2" Height="20" Width="50" Text="{Binding RepeatChatCount}"  PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"/>
                                                            <TextBox Grid.Row="2" Grid.Column="1" Height="20" Width="50"  Text="{Binding RepeatUserMinutes}"  PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"/>
                                                            <TextBox Grid.Row="2" Grid.Column="2" Height="20" Width="50" Text="{Binding RepeatUserCount}"  PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"/>
                                                        </Grid>
                                                    </StackPanel>
                                                </GroupBox>
                                                <CheckBox IsChecked="{Binding RepeatLiveReset, Mode=TwoWay}" >
                                                    <CheckBox.ToolTip>
                                                        <TextBlock Width="200">The repeating commands continually run while the chat bot is active. The repeat timers will fire at their designated time as indicated by the 'repeat timer' and 'category' (of the stream - repeat commands can be specific to certain categories or 'All' for any stream). This setting resets the next fire event to the current time when the bot detects the stream is online.</TextBlock>
                                                    </CheckBox.ToolTip>
                                                    <TextBlock>Enable reset repeat timers when stream is online</TextBlock>
                                                </CheckBox>
                                                <CheckBox IsChecked="{Binding RepeatLiveResetShow, Mode=TwoWay}" >
                                                    <CheckBox.ToolTip>
                                                        <TextBlock>Coupled with the above 'Enable reset repeat timers when stream is online' option, this option permits whether the commands will perform upon the timer reset or not.</TextBlock>
                                                    </CheckBox.ToolTip>
                                                    <TextBlock>Enable showing repeat timer command when timers reset and stream is online.</TextBlock>
                                                </CheckBox>
                                                <TextBlock Visibility="Collapsed">TODO: add option spot for bot AI responses to encourage streamer when chatting is slow, and back away when stream has faster chatting.</TextBlock>
                                            </StackPanel>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox x:Name="GroupBox_ManageDataOptions" Header="Data Management">
                                        <StackPanel>
                                            <Label>
                                                <TextBlock Foreground="Red">*Unchecking will remove data from database.*</TextBlock>
                                            </Label>
                                            <CheckBox x:Name="CheckBox_AppData" IsChecked="{Binding AppCurrWorkingAppData}" MouseEnter="TextBlock_MouseEnter_Visible" MouseLeave="TextBlock_MouseEnter_Hidden" >
                                                <TextBlock TextWrapping="Wrap">Enable saving the data to the AppData location,<TextBlock x:Name="TextBlock_AppDataDir" DataContext="{Binding Mode=OneWay, Source={StaticResource AppServices}}" Text="{Binding AppDataDirectory}" TextWrapping="Wrap" ToolTip="{Binding AppDataDirectory}" Visibility="Hidden"/> <LineBreak /> You will need to close the app, move the save files, and re-open the app.</TextBlock>
                                            </CheckBox>
                                            <CheckBox x:Name="CheckBox_ManageUsers" IsChecked="{Binding ManageUsers}" Click="CheckBox_ManageData_Click">
                                                <TextBlock TextWrapping="Wrap">Manage channel viewers, including their watchtime.*</TextBlock>
                                            </CheckBox>
                                            <CheckBox x:Name="CheckBox_ManageFollowers" IsChecked="{Binding ManageFollowers}" Click="CheckBox_ManageData_Click">
                                                <TextBlock TextWrapping="Wrap">Manage channel followers, including their followage. Requires User data.*</TextBlock>
                                            </CheckBox>
                                            <CheckBox x:Name="CheckBox_ManageStreamStat" IsChecked="{Binding ManageStreamStats}" Click="CheckBox_ManageData_Click">
                                                <TextBlock TextWrapping="Wrap">Record Stream Stats for each stream, including the categories table.*</TextBlock>
                                            </CheckBox>
                                            <CheckBox x:Name="CheckBox_ManageRaidData" IsChecked="{Binding ManageRaidData}" Click="CheckBox_ManageData_Click">
                                                <TextBlock TextWrapping="Wrap">Record Raid Stats for incoming raids.*</TextBlock>
                                            </CheckBox>
                                            <CheckBox x:Name="CheckBox_ManageOutRaidData" IsChecked="{Binding ManageOutRaidData}" Click="CheckBox_ManageData_Click">
                                                <TextBlock TextWrapping="Wrap">Record outgoing raids.*</TextBlock>
                                            </CheckBox>
                                            <CheckBox x:Name="CheckBox_ManageGiveawayUsers" IsChecked="{Binding ManageGiveawayUsers}" Click="CheckBox_ManageData_Click">
                                                <TextBlock TextWrapping="Wrap">Record Giveaway data results.*</TextBlock>
                                            </CheckBox>
                                            <CheckBox x:Name="CheckBox_ManageOverlayTicker" IsChecked="{Binding ManageOverlayTicker}" Click="CheckBox_ManageData_Click">
                                                <TextBlock TextWrapping="Wrap">Record Overlay Ticker items.*</TextBlock>
                                            </CheckBox>
                                            <Label>
                                                <TextBlock Foreground="Red">*Unchecking will remove data from database.*</TextBlock>
                                            </Label>
                                        </StackPanel>
                                    </GroupBox>
                                </WrapPanel>
                            </DockPanel>
                        </ScrollViewer>
                    </TabItem>
                    <TabItem Header="Twitch">
                        <ScrollViewer ScrollViewer.VerticalScrollBarVisibility="Disabled" ScrollViewer.HorizontalScrollBarVisibility="Auto">
                            <DockPanel Margin="10" HorizontalAlignment="Left" ScrollViewer.CanContentScroll="True">
                                <WrapPanel Orientation="Vertical" DockPanel.Dock="Left">
                                    <GroupBox Header="Twitch - Format Bot messages">
                                        <StackPanel>
                                            <Label Content="/me changes message to all italics" />
                                            <RadioButton x:Uid="Disabled" IsChecked="{Binding MsgNoMe, Mode=TwoWay}">
                                                <Label  Content="{DynamicResource Disabled}" />
                                            </RadioButton>
                                            <RadioButton IsChecked="{Binding MsgInsertMe, Mode=TwoWay}">
                                                <Label Content="Enable /me for all commands" />
                                            </RadioButton>
                                            <RadioButton IsChecked="{Binding MsgPerComMe, Mode=TwoWay}">
                                                <Label Content="Enable /me per command" />
                                            </RadioButton>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Twitch - Follow Options">
                                        <StackPanel>
                                            <CheckBox IsChecked="{Binding TwitchAddFollowersStart, Mode=TwoWay}" ToolTip="Will also re-perform when clicking 'Stop Bot' then 'Start Bot'.">
                                                <TextBlock TextWrapping="Wrap">Enable adding all followers when bot starts.</TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding TwitchPruneNonFollowers, Mode=TwoWay}" ToolTip="Will also re-perform when clicking 'Stop Bot' then 'Start Bot'.">
                                                <TextBlock TextWrapping="Wrap">Enable action to remove non-followers from the Follower list when bot starts.</TextBlock>
                                            </CheckBox>

                                            <CheckBox x:Name="CheckBox_TwitchFollower_LimitMsgs" IsChecked="{Binding TwitchFollowerEnableMsgLimit}" Checked="CheckBox_Checked_PanelVisibility" Unchecked="CheckBox_Checked_PanelVisibility">
                                                <TextBlock>Enable Limited Follower Messages</TextBlock>
                                            </CheckBox>

                                            <StackPanel x:Name="StackPanel_TwitchFollower_LimitMsgs_Count" Orientation="Vertical" Visibility="Collapsed" Loaded="CheckBox_Checked_PanelVisibility">
                                                <TextBlock>Multiple messages can clutter chat, this will abbreviate the response to condense the messages.</TextBlock>

                                                <StackPanel Orientation="Horizontal">
                                                    <TextBlock>Choose (1 to 100):</TextBlock>
                                                    <TextBox Width="40" Height="18" Text="{Binding TwitchFollowerMsgLimit, Mode=TwoWay}" HorizontalContentAlignment="Center" 
                                                             LostFocus="TextBox_Follower_LostFocus" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll" 
                                                              />
                                                </StackPanel>

                                                <Slider Value="{Binding TwitchFollowerMsgLimit, Mode=TwoWay}" Maximum="100" Minimum="1" IsSnapToTickEnabled="True" IsSelectionRangeEnabled="True" SelectionEnd="1" SelectionStart="1" SmallChange="1" TickPlacement="Both" LargeChange="5" />
                                            </StackPanel>
                                            <CheckBox x:Name="CheckBox_TwitchFollower_AutoRefresh" IsChecked="{Binding TwitchFollowerAutoRefresh, Mode=TwoWay}" Checked="CheckBox_Checked_PanelVisibility" Unchecked="CheckBox_Checked_PanelVisibility">
                                                <CheckBox.ToolTip>
                                                    <TextBlock>The Twitch API doesn't provide notices when someone unfollows. This refreshes follower list while bot is running - instead of restarting the Follow bot.</TextBlock>
                                                </CheckBox.ToolTip>
                                                <TextBlock>Enable Regular Follower Updatess</TextBlock>
                                            </CheckBox>
                                            <StackPanel x:Name="StackPanel_TwitchFollows_RefreshHrs" Orientation="Horizontal" Visibility="Hidden" Loaded="CheckBox_Checked_PanelVisibility">
                                                <Label>Select Refresh Hours:</Label>
                                                <ComboBox x:Name="ComboBox_TwitchFollower_RefreshHrs" Width="60" ToolTip="Select Frequency in Hours to Refresh Followers" SelectedValue="{Binding TwitchFollowerRefreshHrs, Mode=TwoWay}" SelectionChanged="ComboBox_TwitchFollower_RefreshHrs_SelectionChanged"/>
                                            </StackPanel>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Twitch - Shout Out Viewers">
                                        <StackPanel>
                                            <Label>
                                                <TextBlock>Active when channel is live</TextBlock>
                                            </Label>
                                            <CheckBox IsChecked="{Binding MsgAutoShout, Mode=TwoWay}">
                                                <TextBlock>Auto shoutout viewers when they first appear (tied to 'Welcome Viewers'. Add names to &quot;Auto SO&quot; tab.)</TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding TwitchRaidShoutOut}">
                                                <TextBlock>Enable auto shoutout for incoming channel raid streamers</TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding MsgSendSOToChat}">
                                                <TextBlock>Send !so command to chat-other bots can use for messages. Also applies when 'Auto ShoutOut Incoming Channel Raid' is active.</TextBlock>
                                            </CheckBox>
                                        </StackPanel>
                                    </GroupBox>
                                    <GroupBox Header="Twitch - Stream Clips">
                                        <StackPanel>
                                            <CheckBox IsChecked="{Binding TwitchClipPostChat, Mode=TwoWay}">
                                                <TextBlock>Post new clips to chat.</TextBlock>
                                            </CheckBox>
                                            <CheckBox IsChecked="{Binding TwitchClipPostDiscord}">
                                                <TextBlock>Post new clips to Discord. Must have "Clips" Webhook(s) defined.</TextBlock>
                                            </CheckBox>
                                        </StackPanel>
                                    </GroupBox>

                                </WrapPanel>
                            </DockPanel>
                        </ScrollViewer>
                    </TabItem>
                    <TabItem Header="Themes" Visibility="Collapsed">
                        <Label>Placeholder for application color themes</Label>
                    </TabItem>
                </TabControl>
                <!-- Settings Template                                
                                            <GroupBox Header="Twitch -">
                                                <StackPanel>
                                                    <CheckBox IsChecked="{Binding AutoShout, Mode=TwoWay}" >
                                                        <TextBlock>Auto </TextBlock>
                                                    </CheckBox>
                                                    <CheckBox IsChecked="{Binding TwitchRaidShoutOut}" >
                                                        <TextBlock>Enable </TextBlock>
                                                    </CheckBox>
                                                </StackPanel>
                                            </GroupBox>
                                            -->
            </TabItem>
            <TabItem Header="Data" DataContext="{Binding Mode=OneWay, Source={StaticResource DataViews}}">
                <DockPanel>
                    <TabControl>
                        <TabItem Header="Variables">
                            <DockPanel>
                                <ListBox DockPanel.Dock="Left" DataContext="{Binding Mode=OneWay, Source={StaticResource CommandInfo}}" 
                                         ItemsSource="{Binding Collection}" ScrollViewer.HorizontalScrollBarVisibility="Auto" 
                                         ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True" >
                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding Parameter}" Width="150" />
                                                <TextBlock Text="{Binding Value}" Width="650" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                            </DockPanel>
                        </TabItem>
                        <TabItem Header="Discord">
                            <DockPanel LastChildFill="True">
                                <TextBlock IsEnabled="False" DockPanel.Dock="Top">Add Webhook links, one per line. Bot will report notifications to each Webhook. *The incorrect 'Kind' will prevent the notification.<LineBreak />
                                Use 'AddEveryone'=true (checkmark) to replace #everyone with @everyone, but 'AddEveryone'=false removes 'everyone' from message, some servers don't permit full notification tagging.<LineBreak />
                                </TextBlock>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" DockPanel.Dock="Top" Margin="0,0,0,10">
                                    <Button x:Name="Button_DiscordWebhooks_Enabled" Width="80" Margin="10,0" Content="Enable All" Click="Button_DiscordWebhooks_Click" />
                                    <Button x:Name="Button_DiscordWebhooks_Disabled" Width="80" Content="Disable All" Click="Button_DiscordWebhooks_Click" />
                                </StackPanel>
                                <DataGrid x:Name="DG_Webhooks" DockPanel.Dock="Top" ItemsSource="{Binding Discord, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                            </DockPanel>
                        </TabItem>
                        <TabItem Header="Moderation">
                            <TabControl>
                                <TabItem Header="User Approve" GotFocus="TabItem_ModApprove_GotFocus">
                                    <DockPanel>
                                        <TextBlock DockPanel.Dock="Top">
                                            Use this tab to establish the moderator+ limited actions a user requests and requires mod approval to perform.<LineBreak />
                                            <LineBreak />
                                            ModActionType-the type of defined action-a command, channel point redeem, etc<LineBreak />
                                            ModActionName-the name of the action based on the type. e.g. Type=command, Name=setuserintro<LineBreak />
                                            <Line Height="10" Width="500" Fill="Black" X1="10" X2="210" /><LineBreak />
                                            ModPerformType-the type of action to perform, to specify a name that may exist in different contexts, e.g. a command-!raid.<LineBreak />
                                            ModPerformAction-the name of the action to perform once approved<LineBreak />
                                            <LineBreak />
                                            The default channel point approval takes user supplied text and submits it to a specific command, eg. "!command 'username' 'channelpoint text'".<LineBreak />
                                        </TextBlock>
                                        <DataGrid x:Name="DG_ModApprove" DockPanel.Dock="Top" ItemsSource="{Binding ModeratorApprove, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                    </DockPanel>
                                </TabItem>
                                <TabItem Header="Msg Mod">
                                    <DockPanel>
                                        <TextBlock DockPanel.Dock="Top" MinWidth="150">Use this tab to manage bot moderation settings, such as banning users based on their chat messages or chat activity. To identify a message for action, the bot needs a group of similar messages so a new message can be reviewed and identified. <LineBreak />
                                This procedure uses Machine Learning (hence the 'training'); and uses "BagOfWords" to convert messages (strings into number vectors) such that the "Naive Bayes" classifier can probabilistically determine if a message falls within the same range of trained messages already identified as spam or harrassment. <LineBreak /> <Run Foreground="Red">Caution, the messages of hate and spam need to be included here so similar message can be identified as hate or spam.</Run></TextBlock>

                                        <DockPanel DockPanel.Dock="Top" MaxHeight="150">
                                            <DataGrid Height="250" ItemsSource="{Binding BanReasons}" CanUserDeleteRows="True" DockPanel.Dock="Left" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                            <DataGrid Height="250" ItemsSource="{Binding BanRules}" CanUserDeleteRows="True" DockPanel.Dock="Right" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                            <TextBlock>
                                        Timeout is marked in seconds, min is 1 and max is 1,209,600 (2 weeks). <LineBreak />
                                        When 'ModAction' is set to 'Ban', the timeout isn't used. <LineBreak />
                                        It's probable sometimes messages from long term followers/users are a little more tolerable than new arrivals, options provided for to help with this.
                                            </TextBlock>
                                        </DockPanel>

                                        <DataGrid ItemsSource="{Binding LearnMsgs}" DockPanel.Dock="Bottom" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                    </DockPanel>
                                </TabItem>
                            </TabControl>
                        </TabItem>
                        <TabItem Header="User Data" x:Name="TabItem_Users">
                            <TabControl TabStripPlacement="Left">
                                <TabItem Header="User Follow">
                                    <Grid x:Name="Grid_UserData_UserFollow">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="200" Width="*" />
                                            <ColumnDefinition Width="5" />
                                            <ColumnDefinition MinWidth="200" Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <!-- Follow this children format and add eventhandler to perform tabification of datagrids when user enables option -->

                                        <TextBlock Visibility="Collapsed" DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" Text="{Binding GridTabifyUserFollowWidth}" />

                                        <TabControl x:Name="TabControl_UD_UF_Grid_Tab" Visibility="Collapsed" Grid.ColumnSpan="3">
                                            <TabItem Header="Users" Name="TabItem_UD_UF_Grid_Users" />
                                            <TabItem Header="Followers" Name="TabItem_UD_UF_Grid_Followers" />
                                        </TabControl>

                                        <DockPanel x:Name="DockPanel_UserData_Users" Grid.Row="0" Grid.Column="0">
                                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                                                <Label Content="User List"/>
                                                <Button x:Name="Button_ClearNonFollowers" Content="Clear Non-Followers" Height="20" Width="130" Margin="70,0,15,0" Click="Button_ClearNonFollowers_Click">
                                                    <Button.ToolTip>
                                                        <TextBlock>Remove all non-Followers from User listing. The comparison is "Id" field, not "IsFollower" status.</TextBlock>
                                                    </Button.ToolTip>
                                                </Button>
                                                <Button x:Name="Button_ClearWatchTime" Content="Reset All WatchTime" Height="20" Width="120" Click="Button_ClearWatchTime_Click" Margin="15,0,15,0" />
                                            </StackPanel>
                                            <DataGrid x:Name="DG_Users" ItemsSource="{Binding Users, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                        </DockPanel>

                                        <DockPanel x:Name="DockPanel_UserData_Followers" Grid.Row="0" Grid.Column="2">
                                            <Label Content="Follower List - Bot Account Needs to be a Moderator To View this List" DockPanel.Dock="Top" />
                                            <DataGrid x:Name="DG_Followers" ItemsSource="{Binding Followers, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                        </DockPanel>
                                    </Grid>
                                </TabItem>
                                <TabItem Header="Auto-SO">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="85" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="320" />
                                            <ColumnDefinition Width="5"/>
                                            <ColumnDefinition Width="350*" />
                                        </Grid.ColumnDefinitions>

                                        <StackPanel Grid.Row="0">
                                            <TextBlock TextWrapping="Wrap" Text="When 'Auto shout out' is enabled in options, displaynames in this list will receive a shout-out upon entering the channel - when Twitch tells me they're here."/>
                                            <Button Width="250" Height="20" Content="Shout these Users if in Chat" ToolTip="The 'soactive' command needs to be enabled." Margin="10,10,10,10" Click="ShoutUsers_Click"/>
                                        </StackPanel>

                                        <DataGrid Grid.Row="1" ItemsSource="{Binding ShoutOuts, Mode=OneWay}"  ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />

                                        <TextBlock Grid.Row="0" Grid.Column="2" Text="Specify a custom message per UserName, tied to Welcome Message options - first appearance or first message. Otherwise, system falls back onto default." />
                                        <DataGrid x:Name="DG_CustomWelcome" Grid.Row="1" Grid.Column="2" ItemsSource="{Binding CustomWelcomeData, Mode=OneWay}" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                    </Grid>
                                </TabItem>
                                <TabItem Header="Currency" x:Name="TabItem_CurrencyAccrual">
                                    <TabControl>
                                        <TabItem Header="Data">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="65" />
                                                    <RowDefinition Height="*" />
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="400"/>
                                                    <ColumnDefinition Width="5"/>
                                                    <ColumnDefinition />
                                                </Grid.ColumnDefinitions>

                                                <Label Grid.Row="0" Grid.ColumnSpan="3">
                                                    <TextBlock Width="744">Specify Currency Type (left side) to accrue per user (right side). Specify Amount earned for Seconds of time (e.g. earn 5 every 10 seconds). Any updates are prospective (starts from now) and not retrospective (doesn't award currency for the past).</TextBlock>
                                                </Label>
                                                <Button x:Name="Button_ClearCurrencyAccrlValues" Grid.Column="2" Height="20" Width="147" Content="Clear All Currency Values" VerticalAlignment="Center" HorizontalAlignment="Right" Click="Button_ClearCurrencyAccrlValues_Click" />
                                                <DataGrid x:Name="DG_Currency" ItemsSource="{Binding CurrencyType, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" Grid.Row="1" Grid.Column="0" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                                <DataGrid x:Name="DG_CurrencyAccrual" ItemsSource="{Binding Currency, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" Grid.Row="1" Grid.Column="2" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                            </Grid>
                                        </TabItem>
                                        <TabItem Header="Games">
                                            <WrapPanel DataContext="{Binding Source={x:Static s:Settings.Default}}">
                                                <GroupBox Header="Cards - Blackjack 21" Padding="5">
                                                    <GroupBox.Resources>
                                                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                                                            <Setter Property="Height" Value="19" />
                                                            <Setter Property="Width" Value="30" />
                                                        </Style>
                                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                                                            <Setter Property="Width" Value="100" />
                                                        </Style>
                                                        <Style TargetType="{x:Type StackPanel}">
                                                            <Setter Property="Margin" Value="0,2" />
                                                        </Style>
                                                    </GroupBox.Resources>
                                                    <StackPanel Orientation="Vertical" HorizontalAlignment="Center">
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock>House Stands at:</TextBlock>
                                                            <TextBox Text="{Binding GameBlackJackHouseStands}" />
                                                        </StackPanel>
                                                        <TextBlock />
                                                        <TextBlock TextDecorations="Underline">Player payouts:</TextBlock>
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock>Dealt 21:</TextBlock>
                                                            <TextBox Text="{Binding GameBlackJackPayoutDealt21}" />
                                                            <TextBlock Width="20">%</TextBlock>
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock>Reaches 21:</TextBlock>
                                                            <TextBox Text="{Binding GameBlackJackPayoutReach21}" />
                                                            <TextBlock Width="20">%</TextBlock>
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock>Under 21 Stop:</TextBlock>
                                                            <TextBox Text="{Binding GameBlackJackPayoutUnder21}" />
                                                            <TextBlock Width="20">%</TextBlock>
                                                        </StackPanel>
                                                        <StackPanel Orientation="Vertical">
                                                            <TextBlock Width="180">Payout Message (use #value):</TextBlock>
                                                            <TextBox Width="180" Text="{Binding GameBlackJackPayoutMessage}" />
                                                        </StackPanel>
                                                    </StackPanel>
                                                </GroupBox>
                                            </WrapPanel>
                                        </TabItem>
                                    </TabControl>
                                </TabItem>
                                <TabItem Header="Giveaways" x:Name="TabItem_Giveaways" Loaded="TabItem_Giveaways_Loaded">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="50" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="250*" />
                                            <ColumnDefinition Width="400" />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Grid.Row="0" Grid.Column="0">Setup Giveaways! <LineBreak />Be sure to start "Twitch Chat Client" bot to read channel points, viewer entries, and provide giveaway details and winner(s) to viewers.</TextBlock>

                                        <DockPanel Grid.Row="1" Grid.Column="0" HorizontalAlignment="Center" DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}">
                                            <DockPanel.Resources>
                                                <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
                                                    <Setter Property="Width" Value="180" />
                                                </Style>
                                                <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                                                    <Setter Property="Width" Value="250"/>
                                                    <Setter Property="Height" Value="18" />
                                                </Style>
                                            </DockPanel.Resources>
                                            <GroupBox DockPanel.Dock="Top" Header="Select Giveaway Condition" Width="Auto" VerticalAlignment="Top">
                                                <GroupBox.ToolTip>Select the &quot;Command&quot; or &quot;Channel Points&quot; item a viewer uses to enter the giveaway.</GroupBox.ToolTip>
                                                <StackPanel>
                                                    <RadioButton x:Name="RadioButton_GiveawayCommand" VerticalContentAlignment="Center">
                                                        <StackPanel Orientation="Horizontal">
                                                            <Label Width="100">Command</Label>
                                                            <ComboBox x:Name="ComboBox_Giveaway_Coms" MinWidth="200" DataContext="{Binding Mode=OneWay, Source={StaticResource DataViews}}" ItemsSource="{Binding CommandCollection, Mode=OneWay}" PreviewMouseLeftButtonDown="ComboBox_Giveaway_PreviewMouseLeftButtonDown" DropDownClosed="ComboBox_Giveaway_DropDownClosed" />
                                                        </StackPanel>
                                                    </RadioButton>
                                                    <RadioButton x:Name="RadioButton_GiveawayCustomRewards" VerticalContentAlignment="Center">
                                                        <WrapPanel Orientation="Horizontal">
                                                            <Label Width="100">Channel Points</Label>
                                                            <ComboBox x:Name="ComboBox_Giveaway_ChanPts" MinWidth="200" PreviewMouseLeftButtonDown="ComboBox_Giveaway_PreviewMouseLeftButtonDown" DropDownClosed="ComboBox_Giveaway_DropDownClosed" />
                                                            <Button x:Name="Button_Giveaway_RefreshChannelPoints" Margin="5,0" Height="21" Padding="5,2" Content="Refresh" Click="Button_RefreshChannelPoints_Click" />
                                                        </WrapPanel>
                                                    </RadioButton>
                                                </StackPanel>
                                            </GroupBox>
                                            <StackPanel DockPanel.Dock="Top" Margin="5" Orientation="Horizontal">
                                                <CheckBox IsChecked="{Binding GiveawayMultiUser}" >
                                                    <Label Content="Allow more than 1 entry" />
                                                </CheckBox>
                                                <Label Margin="50,0,0,0" VerticalAlignment="Center" Width="Auto" Content="Max Entries" />
                                                <TextBox Width="40" Text="{Binding GiveawayMaxEntries}" ToolTip="Can be changed during giveaway, lowered will remove excess entrants." HorizontalContentAlignment="Center"  PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"/>
                                            </StackPanel>
                                            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" HorizontalAlignment="Center">
                                                <StackPanel.Resources>
                                                    <Style TargetType="Button">
                                                        <Setter Property="Padding" Value="5,0" />
                                                        <Setter Property="Margin" Value="5,3"/>
                                                    </Style>
                                                </StackPanel.Resources>
                                                <Button x:Name="Button_GiveawayBegin" Content="Begin Giveaway" Click="Button_GiveawayBegin_Click" IsEnabled="False">
                                                    <Button.ToolTip>
                                                        <TextBlock>The ChatBot needs to be started for chatting Giveaway messages. PubSub Bot needs to be started for Channel Points redemption to be detected.</TextBlock>
                                                    </Button.ToolTip>
                                                </Button>
                                                <Button x:Name="Button_GiveawayEnd" Content="End Giveaway" Click="Button_GiveawayEnd_Click" IsEnabled="False" />
                                                <Button x:Name="Button_GiveawayPickWinner" Content="Pick Winners" Click="Button_GiveawayPickWinner_Click" IsEnabled="False" />
                                            </StackPanel>
                                            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
                                                <Label>Number of Winners:</Label>
                                                <TextBox Width="30" HorizontalContentAlignment="Center" Text="{Binding GiveawayCount, Mode=TwoWay}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll">
                                                    <TextBox.ToolTip>
                                                        <TextBlock>Specify how many viewers to select for the giveaway event.</TextBlock>
                                                    </TextBox.ToolTip>
                                                </TextBox>
                                            </StackPanel>
                                            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
                                                <Label>Giveaway start message:</Label>
                                                <TextBox Text="{Binding GiveawayBegMsg, Mode=TwoWay}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"/>
                                            </StackPanel>
                                            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
                                                <Label>Giveaway end message:</Label>
                                                <TextBox Text="{Binding GiveawayEndMsg, Mode=TwoWay}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll"/>
                                            </StackPanel>
                                            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
                                                <Label>Winner Message (#winner):</Label>
                                                <TextBox Text="{Binding GiveawayWinMsg, Mode=TwoWay}" PreviewMouseLeftButtonDown="PreviewMouseLeftButton_SelectAll">
                                                    <TextBox.ToolTip>
                                                        <TextBlock>Use #user to include the name in the Giveaway announcement text.</TextBlock>
                                                    </TextBox.ToolTip>
                                                </TextBox>
                                            </StackPanel>
                                            <StackPanel DockPanel.Dock="Top" Margin="0,10,0,2" Orientation="Horizontal" HorizontalAlignment="Center">
                                                <Label Content="Current Giveaway Entrants:" />
                                                <Label Width="Auto" DataContext="{Binding Mode=OneWay, Source={StaticResource DataViews}}" Content="{Binding GiveawayCollection.Count, Mode=OneWay}"  />
                                            </StackPanel>
                                            <ListView DockPanel.Dock="Top" x:Name="listView" Width="300" DataContext="{Binding Mode=OneWay, Source={StaticResource DataViews}}" ItemsSource="{Binding GiveawayCollection}">
                                                <ListView.View>
                                                    <GridView>
                                                        <GridViewColumn Header="Order" Width="70" DisplayMemberBinding="{Binding RelativeSource={RelativeSource FindAncestor, 
                                         AncestorType={x:Type ListViewItem}}, 
                                         Converter={StaticResource IndexConverter}}"
                                                                        />
                                                        <GridViewColumn Header="Entrant" Width="200" DisplayMemberBinding="{Binding Mode=OneWay}" />
                                                    </GridView>
                                                </ListView.View>
                                            </ListView>

                                        </DockPanel>

                                        <TextBlock Grid.Row="0" Grid.Column="1">Results of prior Giveaways recorded here! <LineBreak /> Data management is enabled or disabled in the Options tab.</TextBlock>
                                        <DataGrid Grid.Row="1" Grid.RowSpan="2" Grid.Column="1" DataContext="{Binding Mode=OneWay, Source={StaticResource DataViews}}" ItemsSource="{Binding GiveawayUserData, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                    </Grid>
                                </TabItem>
                                <TabItem Header="Quotes">
                                    <Grid>
                                        <DockPanel Grid.Row="0" Grid.Column="0">
                                            <Label Content="User Quotes - Use '!addquote {quote text}', '!quote'(show how many), '!quote {#}'(specific), and '!removequote {#}' to manage quotes in stream chat" DockPanel.Dock="Top" />
                                            <DataGrid ItemsSource="{Binding Quotes, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                        </DockPanel>
                                    </Grid>
                                </TabItem>
                            </TabControl>
                        </TabItem>
                        <TabItem Header="System Events">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="70" />
                                    <RowDefinition Height="100*" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <StackPanel Grid.Row="0" Margin="5">
                                    <TextBlock>Double-click the Message for your custom message. Use the 'Commands' to customize to a name or relevant values.<LineBreak/>'Live' is a message to Discord/other services.</TextBlock>
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                        <Button x:Name="Button_SystemEvents_Enabled" Width="80" Margin="10,0" Content="Enable All" Click="Button_SystemEvents_Click"/>
                                        <Button x:Name="Button_SystemEvents_Disabled" Width="80" Content="Disable All" Click="Button_SystemEvents_Click" />
                                    </StackPanel>
                                </StackPanel>
                                <DataGrid x:Name="DG_CommonMsgs" ItemsSource="{Binding ChannelEvents, Mode=OneWay}"  AutoGeneratedColumns="DG_AutoGeneratedColumns" Grid.Row="1" Grid.Column="2" CanUserDeleteRows="False" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" >
                                    <DataGrid.ToolTip>
                                        <TextBlock TextWrapping="Wrap" Width="500"><Run Text="The name column is readonly. These are for channel events the bot recognizes and responds with the specified message."/><LineBreak /><LineBreak /><Run Text="You can edit the message to customize a response fitting your channel!"/><LineBreak /><Run Text="Please see the parameters to the right to use in each message, not all will be applicable. Ensure a space before the parameter, e.g. &quot;the #user followed&quot;, the &quot; #&quot; needs to be the first character in the word."/></TextBlock>
                                    </DataGrid.ToolTip>
                                </DataGrid>
                            </Grid>
                        </TabItem>
                        <TabItem Header="Commands">
                            <TabControl>
                                <TabItem Header="Help">
                                    <StackPanel Orientation="Vertical">
                                        <TextBlock><Run Text="The 'BuiltInCommands' are those established within the bot."/><LineBreak /><Run Text="The 'socials' (specific services): add your custom message for the social media and your access URL. E.g. &quot;Visit me on Twitter at: http://wwww.twitter.com/myuser&quot;. The command will show all socials except messages that are blank or the default 'Social media url here'."/><LineBreak /><LineBreak /><Run Text="The variables within message to format a custom response:"/><LineBreak /><Run Text="#user: the user specific to the command; either 'command invoker' user or parameter to the command"/><LineBreak /><Run Text="#url: the Twitch URL with the supplied user attached - specific to 'so == shoutout' command"/><LineBreak /><Run Text="#fieldvalue: placeholder for the value from a table lookup"/><LineBreak /><Run Text="#currencyname: placeholder for the currency name - extracted from table"/><LineBreak /><Run Text="#currencyvalue: the value of a currency"/><LineBreak /><LineBreak /><Run Text="#date: the current date"/><LineBreak /><Run Text="#time: the current time"/><LineBreak /></TextBlock>
                                        <Rectangle Width="800" Stretch="Fill" Height="1" />
                                        <StackPanel Orientation="Horizontal">
                                            <Label Content="Viewer Type Values: " />
                                            <TextBlock Text="{Binding ViewerTypesValues, Mode=OneWay, Source={StaticResource ViewerTypesString}}" FlowDirection="LeftToRight" ToolTip="ViewerTypes for Command access rights" VerticalAlignment="Center" />
                                        </StackPanel>

                                        <Label Content="A value to the right permits access with the leftward values, e.g. selecting 'VIP' allows 'VIP, Mod, Broadcaster' access rights. "/>
                                    </StackPanel>
                                </TabItem>
                                <TabItem Header="Built-In">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <StackPanel Grid.Row="0">
                                            <TextBlock Margin="5">To use command repeat timers, set option in 'Option' tab and set the *seconds* within the command row. This repeat doesn't work with those commands requiring parameters. The '!socials', for example, is an ideal repeat command. 1 minute = 60 seconds, 10 minutes = 600 seconds, 15 minutes = 900 seconds, 30 minutes = 1800 seconds, 1 hour = 3600 seconds. Top can be '0' for a single item, '-1' for all items, and 'n' (positive integer) for the top n items as defined by 'sort = ASC or DESC.</TextBlock>
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                <Button x:Name="Button_BuiltInCommands_Enabled" Width="80" Margin="10,0" Content="Enable All" Click="Button_BuiltInCommands_Click" />
                                                <Button x:Name="Button_BuiltInCommands_Disabled" Width="80" Content="Disable All" Click="Button_BuiltInCommands_Click" />
                                            </StackPanel>
                                        </StackPanel>

                                        <DockPanel Grid.Row="1">
                                            <Label DockPanel.Dock="Top" Content="Built-in Commands:" />
                                            <DataGrid DockPanel.Dock="Top" x:Name="DG_BuiltInCommands" ItemsSource="{Binding BuiltInCommands, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" CanUserDeleteRows="False" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                        </DockPanel>
                                    </Grid>
                                </TabItem>
                                <TabItem Header="User-Defined">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>

                                        <StackPanel Grid.Row="0">
                                            <TextBlock Margin="5">To use command repeat timers, set option in 'Option' tab and set the *seconds* within the command row. This repeat doesn't work with those commands requiring parameters. The '!socials', for example, is an ideal repeat commands. 1 minute = 60 seconds, 10 minutes = 600 seconds, 15 minutes = 900 seconds, 30 minutes = 1800 seconds, 1 hour = 3600 seconds. Top can be '0' for a single item, '-1' for all items, and 'n' (positive integer) for the top n items as defined by 'sort = ASC or DESC"</TextBlock>
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                <Button x:Name="Button_UserDefinedCommands_Enabled" Width="80" Margin="10,0" Content="Enable All" Click="Button_UserDefinedCommands_Click" />
                                                <Button x:Name="Button_UserDefinedCommands_Disabled" Width="80" Content="Disable All" Click="Button_UserDefinedCommands_Click" />
                                            </StackPanel>
                                        </StackPanel>

                                        <DockPanel Grid.Row="1">
                                            <Label DockPanel.Dock="Top" Content="User-Defined Commands:" />
                                            <DataGrid x:Name="DG_UserDefinedCommands" DockPanel.Dock="Top" ItemsSource="{Binding Commands, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                        </DockPanel>
                                    </Grid>
                                </TabItem>
                            </TabControl>
                        </TabItem>
                        <TabItem x:Name="TabItem_Overlays" Header="Overlays" GotFocus="TabItem_Overlays_GotFocus" >
                            <TabControl>
                                <TabItem Header="Events">
                                    <DockPanel>
                                        <Expander DockPanel.Dock="Top" DataContext="{Binding Source={x:Static s:Settings.Default}}" IsExpanded="{Binding MediaOverlayHelpExpand}">
                                            <Expander.Header>
                                                <TextBlock>Media Overlay Services!</TextBlock>
                                            </Expander.Header>
                                            <TextBlock>
                                    Specify the duration in seconds,<LineBreak />
                                    Specify type: Channel Events (new Follows, Subs, etc), Commands (!sunrise, to show a sunrise picture/video, etc), Channel Points redeemed;<LineBreak />
                                    Specify the actual Action: Channel Events-Follow, Subscription, Gift Subscription, etc;<LineBreak />
                                    Specify Message: to add any text to the overlay; and <LineBreak />
                                    Specify ImageFile: the picture to display for the alert, and ensure Duration is specified to limit the alert, most web images supported<LineBreak />
                                    Specify MediaFile: the audio or video to display for the alert. 
                                        <LineBreak />Supported audio: .mp3, .wav<LineBreak />
                                        Supported video: .mp4, .webm, .ogg<LineBreak />
                                    <LineBreak />
                                    If you expect Channel Point Rewards and none are loaded, Twitch requires the streamer's credentials to access the channel point rewards list.
                                            </TextBlock>
                                        </Expander>
                                        <WrapPanel DockPanel.Dock="Top" HorizontalAlignment="Center">
                                            <GroupBox Margin="7" Padding="8" HorizontalAlignment="Center" Header="Manage Overlay Alerts Queue" Width="Auto">
                                                <StackPanel>
                                                    <StackPanel Orientation="Horizontal">
                                                        <CheckBox Padding="4,2" Margin="0,0,40,0" Click="Button_Overlay_PauseAlerts_Click" DataContext="{Binding MediaOverlayServer, Source={StaticResource AppServices}}" ClickMode="Press" VerticalAlignment="Center" VerticalContentAlignment="Center">
                                                            <TextBlock>Pause Alert Queue</TextBlock>
                                                        </CheckBox>
                                                        <Button Content="Clear Alert Queue" Padding="4,2" Click="Button_Overlay_ClearAlerts_Click" DataContext="{Binding MediaOverlayServer, Source={StaticResource AppServices}}" />
                                                    </StackPanel>
                                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                        <Label Content="{Binding MediaOverlayServer.MediaItems, Source={StaticResource AppServices}}" />
                                                        <Label Content=" Action items" />
                                                    </StackPanel>
                                                </StackPanel>
                                            </GroupBox>
                                            <GroupBox Header="Available Channel Points Redemptions">
                                                <StackPanel>
                                                    <Button x:Name="Button_ChannelPts_Refresh" Content="Refresh Channel Points" Width="140" Margin="0,10"  Click="Button_RefreshChannelPoints_Click" />
                                                    <ComboBox x:Name="ComboBox_ChannelPoints" Height="21" Width="180" SelectedIndex="0" PreviewMouseLeftButtonDown="ComboBox_Giveaway_PreviewMouseLeftButtonDown" DropDownClosed="ComboBox_Giveaway_DropDownClosed" />
                                                </StackPanel>
                                            </GroupBox>
                                        </WrapPanel>
                                        <DataGrid x:Name="DataGrid_OverlayService_Actions" DockPanel.Dock="Top" ItemsSource="{Binding OverlayService, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" CanUserDeleteRows="False" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                    </DockPanel>
                                </TabItem>
                                <TabItem Header="Ticker">
                                    <DockPanel>
                                        <TextBlock DockPanel.Dock="Top">This tab displays the data used in the 'Last User' ticker.</TextBlock>
                                        <TextBlock DockPanel.Dock="Top" Foreground="Red">Added this table and data recording feature a while ago in the background. If the data looks odd, delete it or update.</TextBlock>
                                        <DataGrid DockPanel.Dock="Top" ItemsSource="{Binding OverlayTicker, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" CanUserDeleteRows="False" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />

                                    </DockPanel>
                                </TabItem>
                            </TabControl>
                        </TabItem>
                        <TabItem Header="Stream Data" x:Name="TabItem_StreamData">
                            <TabControl TabStripPlacement="Left">
                                <TabItem x:Name="TabItem_StreamData_Stats" Header="Stats">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="25" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <StackPanel x:Name="StackPanel_DebugLivestream" Orientation="Horizontal" Grid.Row="0">
                                            <Button Content="Add Random Test Stream" Height="20" Margin="10,0" ToolTip="Will activate in debug mode, won't post to social media." Click="StartDebugStream_Click"/>
                                            <Button Content="Stop Random Test Stream" Height="20" Margin="10,0" Click="EndDebugStream_Click" />
                                        </StackPanel>
                                        <DataGrid x:Name="DataGrid_StreamData_Stats" Grid.Row="1" ItemsSource="{Binding StreamStats, Mode=OneWay}" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                    </Grid>
                                </TabItem>
                                <TabItem Header="Raids">
                                    <Grid x:Name="Grid_SD_Raids">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="600*" />
                                            <ColumnDefinition Width="6" />
                                            <ColumnDefinition Width="300*" />
                                        </Grid.ColumnDefinitions>

                                        <!-- Follow this children format and add eventhandler to perform tabification of datagrids when user enables option -->

                                        <TextBlock Visibility="Collapsed" DataContext="{Binding Mode=OneWay, Source={x:Static s:Settings.Default}}" Text="{Binding GridTabifyStreamRaidsWidth}" />

                                        <TabControl x:Name="TabControl_SD_Raids" Grid.ColumnSpan="3" Visibility="Collapsed">
                                            <TabItem x:Name="TabItem_SD_Raids_Incoming" Header="Incoming" />
                                            <TabItem x:Name="TabItem_SD_Raids_Outgoing" Header="Outgoing" />
                                        </TabControl>

                                        <DockPanel x:Name="DockPanel_StreamData_Raids_Incoming" Grid.Row="0" Grid.Column="0">
                                            <TextBlock DockPanel.Dock="Top">This table saves incoming raids to your channel, so you can show them any additional appreciation after your stream. Category indicates what they were streaming.</TextBlock>
                                            <DataGrid x:Name="DG_InRaids" ItemsSource="{Binding InRaidData, Mode=OneWay}" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                        </DockPanel>

                                        <DockPanel x:Name="DockPanel_StreamData_Raids_Outgoing" Grid.Row="0" Grid.Column="2">
                                            <TextBlock DockPanel.Dock="Top">This table saves outgoing raids from your channel, so you know the channels you've raided and can spread the love.</TextBlock>
                                            <DataGrid x:Name="DG_OutRaids" ItemsSource="{Binding OutRaidData, Mode=OneWay}" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                        </DockPanel>
                                    </Grid>
                                </TabItem>
                                <TabItem Header="Categories" x:Name="TabItem_Category">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="25" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="410"/>
                                            <ColumnDefinition Width="5"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <Label Grid.Row="0" Grid.Column="0">
                                            <TextBlock>Streaming Categories</TextBlock>
                                        </Label>
                                        <Label Grid.Row="0" Grid.Column="2">
                                            <TextBlock>Death Counter per Category</TextBlock>
                                        </Label>
                                        <DataGrid x:Name="DG_CategoryList" Grid.Row="1" Grid.Column="0" ItemsSource="{Binding Category, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                        <DataGrid x:Name="DG_DeathCounter" Grid.Row="1" Grid.Column="2" ItemsSource="{Binding GameDeadCounter, Mode=OneWay}" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                    </Grid>
                                </TabItem>
                                <TabItem Header="Clips" x:Name="TabItem_Clips">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="25" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Label Grid.Row="0" Content="Clip List"/>
                                        <DataGrid x:Name="DG_Clips" ItemsSource="{Binding Clips, Mode=OneWay}" Grid.Row="1" AutoGeneratedColumns="DG_AutoGeneratedColumns" ContextMenuOpening="DG_Edit_ContextMenuOpening" MouseDoubleClick="DG_MouseDoubleClick" />
                                    </Grid>
                                </TabItem>
                            </TabControl>
                        </TabItem>
                        <TabItem x:Name="TabItem_Data_Separator" IsEnabled="False" MinWidth="20" Width="20" Height="10" Visibility="Visible" />
                        <TabItem x:Name="TabItem_Data_MultiLive" Header="MultiLive Monitor" Visibility="Visible">
                            <Frame x:Name="MultiLive_Data" Source="pack://application:,,,/StreamerBotLib;component/MultiLive/MultiLiveDataGrids.xaml" IsManipulationEnabled="True" />
                        </TabItem>
                    </TabControl>
                </DockPanel>
            </TabItem>
            <TabItem Header="Logs">
                <TabControl>
                    <TabItem Header="Bot Status" DataContext="{DynamicResource AppStats}" >
                        <TabItem.Resources>
                            <DataTemplate x:Key="AppStatTemplate">
                                <StackPanel Orientation="Horizontal">
                                    <Label Width="200" Content="{Binding Name}" />
                                    <Label Content="{Binding Value, Converter={StaticResource AppDataConverter}}" />
                                </StackPanel>
                            </DataTemplate>
                            <Style TargetType="ListViewItem">
                                <Setter Property="ContentTemplate" Value="{StaticResource AppStatTemplate}" />
                            </Style>
                        </TabItem.Resources>
                        <ListView BorderBrush="{DynamicResource ForegroundText}" BorderThickness="2,2,1,2" Padding="5">
                            <ListViewItem Content="{Binding Path=Header}" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource ForegroundText}" />
                            <ListViewItem Content="{Binding Path=Threads}" />
                            <ListViewItem Content="{Binding Path=ClosedThreads}" />
                            <ListViewItem Content="{Binding Path=Uptime}" />
                        </ListView>
                    </TabItem>
                    <TabItem Header="Twitch Status" GotFocus="TabItem_GotFocus">
                        <GroupBox Header="Bot Status Log" BorderBrush="Black" Width="Auto">
                            <DockPanel>
                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" DataContext="{Binding Source={x:Static s:Settings.Default}}">
                                    <CheckBox IsChecked="{Binding LogBotStatus}" Margin="3" ToolTip="Save this log - 'StatusLog.txt'">
                                        <TextBlock>
                                            Enable Bot Status Logging
                                        </TextBlock>
                                    </CheckBox>
                                    <CheckBox IsChecked="{Binding LogExceptions}" Margin="3" ToolTip="Save Exceptions - 'ExceptionsLog.txt'">
                                        <TextBlock>
                                            Enable TwineBot Exception Logging
                                        </TextBlock>
                                    </CheckBox>
                                </StackPanel>
                                <TextBox x:Name="TextBlock_TwitchBotLog" DataContext="{Binding TwitchChat, Mode=OneWay, Source={StaticResource TwitchBot}}" Text="{Binding StatusLog, Mode=OneWay}" TextWrapping="Wrap" Width="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" IsReadOnly="True" VerticalScrollBarVisibility="Visible" IsInactiveSelectionHighlightEnabled="True" TextChanged="TextBox_TwitchBotLog_TextChanged" />
                            </DockPanel>
                        </GroupBox>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Bot Chat">
                <DockPanel LastChildFill="True">
                    <DockPanel LastChildFill="True" DockPanel.Dock="Left" Margin="0,0,10,0">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="25" />
                                <RowDefinition Height="25"/>
                                <RowDefinition Height="100"/>
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Label Grid.Row="0" Content="Join List to organize playing games with your viewers." HorizontalContentAlignment="Center" Grid.RowSpan="3" />
                            <Label Grid.Row="1" Content="Click the 'remove' box next to the user name to remove from this list." HorizontalContentAlignment="Center" Grid.RowSpan="3" />
                            <GroupBox Grid.Row="2" Padding="10" Header="Join List Status"  >
                                <StackPanel DataContext="{Binding Source={x:Static s:Settings.Default}}">
                                    <RadioButton IsChecked="{Binding UserPartyStart, Mode=TwoWay}" >
                                        <TextBlock>Start Join List</TextBlock>
                                    </RadioButton>
                                    <RadioButton IsChecked="{Binding UserPartyStop, Mode=TwoWay}" >
                                        <TextBlock>
                                        Stop Join List
                                        </TextBlock>
                                    </RadioButton>
                                </StackPanel>
                            </GroupBox>
                            <ListView Grid.Row="3" x:Name="LV_JoinList" MaxWidth="500" DataContext="{Binding Source={StaticResource DataViews}}"
                                      ItemsSource="{Binding JoinCollection, NotifyOnTargetUpdated=True, NotifyOnSourceUpdated=True}" SelectionMode="Single" Margin="0,0,0,10" d:ItemsSource="{d:SampleData ItemCount=5}">
                                <ListView.Resources>
                                    <DataTemplate x:Key="GridColCheck">
                                        <CheckBox IsChecked="{Binding Remove, Mode=TwoWay, NotifyOnTargetUpdated=True, UpdateSourceTrigger=PropertyChanged}" Checked="JoinCollectionCheckBox_Checked" AutomationProperties.IsRowHeader="False" />
                                    </DataTemplate>
                                </ListView.Resources>
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Header="Remove" Width="70" CellTemplate="{DynamicResource GridColCheck}" />
                                        <GridViewColumn Header="GameTag UserName" Width="200" DisplayMemberBinding="{Binding GameUserName, Mode=OneWay, UpdateSourceTrigger=Default}" />
                                        <GridViewColumn Header="Chat User" Width="200" DisplayMemberBinding="{Binding ChatUser, Mode=OneWay, UpdateSourceTrigger=Default}" />
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </Grid>
                    </DockPanel>
                    <DockPanel>
                        <Label Content="Current User List" DockPanel.Dock="Top" />
                        <ListView DataContext="{DynamicResource DataViews}" ItemsSource="{Binding CurrUserList}" Width="200" DockPanel.Dock="Top" ScrollViewer.CanContentScroll="True" d:ItemsSource="{d:SampleData ItemCount=5}">
                            <ListView.ToolTip>
                                <TextBlock TextWrapping="Wrap" Width="80">Currently, the API doesn't support identifying joining users with their viewer type (broadcaster, moderator etc).</TextBlock>
                            </ListView.ToolTip>
                        </ListView>
                    </DockPanel>
                    <DockPanel LastChildFill="True" DockPanel.Dock="Right"  Background="#FF2B2929" >
                        <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom" Margin="5" Width="410">
                            <Button Padding="10,4" Margin="10" Content="Pop-Out Chat Box" Click="PopOutChatButton_Click" Height="26" Opacity="1" IsEnabled="False" />
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <Label Padding="0" Content="Pop-out Opacity"/>
                                <TextBlock Text="50%"/>
                            </StackPanel>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom" HorizontalAlignment="Right" Margin="0,4,15,4">
                            <TextBox x:Name="TextBox_BotChat" Width="150" />
                            <Button Content="Send" Margin="10,0,0,0" Padding="8,2" Click="BotChat_SendButton_Click" />
                        </StackPanel>
                        <FlowDocumentScrollViewer DockPanel.Dock="Top" BorderThickness="1,1,1,1" x:Name="FlowDoc_ChatBox" ScrollViewer.CanContentScroll="True" DataContext="{Binding Mode=OneWay, Source={StaticResource DataViews}}" Document="{Binding ChatData, Mode=OneWay, NotifyOnSourceUpdated=True}" Foreground="#FFC5C3C3" />
                    </DockPanel>
                </DockPanel>
            </TabItem>
            <TabItem Header="GitHub">
                <DockPanel>
                    <TextBlock DockPanel.Dock="Top">
                        All StreamerBot Releases - Always backup data files!
                    </TextBlock>
                    <TabControl>
                        <TabControl.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="BorderThickness" Value="2" />
                                <Setter Property="BorderBrush" Value="Black" />
                            </Style>
                        </TabControl.Resources>
                        <TabItem Header="Wiki Doc">
                            <DockPanel>
                                <Label DockPanel.Dock="Top" Content="The Wiki Documentation to help use the Bot" />
                                <Border>
                                    <DockPanel>
                                        <Button DockPanel.Dock="Top" Content="Reload"  Width="59" Height="29" Click="WebView2Reload_Click" HorizontalAlignment="Left" />
                                        <wv2:WebView2 DataContext="" Source="{Binding Mode=OneWay, Source={x:Static StaticLib:OptionFlags.GitHubWikiLink}}" />
                                    </DockPanel>
                                </Border>
                            </DockPanel>
                        </TabItem>
                        <TabItem Header="Stable">
                            <DockPanel>
                                <Label DockPanel.Dock="Top" Content="Latest stable release - may have unusual bugs, most are resolved" />
                                <Border>
                                    <DockPanel>
                                        <Button DockPanel.Dock="Top" Content="Reload" HorizontalAlignment="Left" Height="29"  Click="WebView2Reload_Click" />
                                        <wv2:WebView2 DataContext="" Source="{Binding Mode=OneWay, Source={x:Static StaticLib:OptionFlags.GitHubStableLink}}"/>
                                    </DockPanel>
                                </Border>
                            </DockPanel>
                        </TabItem>
                        <TabItem Header="Latest">
                            <DockPanel>
                                <Label DockPanel.Dock="Top" Content="Latest development and stable releases - may have bugs while testing for next stable release" />
                                <Border>
                                    <DockPanel>
                                        <Button DockPanel.Dock="Top" Content="Reload" HorizontalAlignment="Left" Height="29"  Click="WebView2Reload_Click" />
                                        <wv2:WebView2 DataContext="" Source="{Binding Mode=OneWay, Source={x:Static StaticLib:OptionFlags.GitHubLatestLink}}"/>
                                    </DockPanel>
                                </Border>
                            </DockPanel>
                        </TabItem>
                    </TabControl>
                </DockPanel>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>
