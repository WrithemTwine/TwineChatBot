using System.Collections.Generic;
using System.Web;

using TwitchLib.Api.Core.Exceptions;
using TwitchLib.Api.Core.Interfaces;

using ApiAuth = TwitchLib.Api.Auth;

namespace StreamerBotLib.BotClients.Twitch.TwitchLib
{
    internal class ExtAuth : ApiAuth.Auth
    {
        // derived from:
        // https://github.com/TwitchLib/TwitchLib.Api/blob/master/TwitchLib.Api/Auth/Auth.cs
        // add another method to handle authentication scopes already converted into {group}:{area}:{method} style scopes

        public ExtAuth(IApiSettings settings, IRateLimiter rateLimiter, IHttpCallHandler http) : base(settings, rateLimiter, http)
        {
        }

        /// <summary>
        /// Generates an authorization code URL. Please see OAuth authorization code flow https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/#oauth-authorization-code-flow.
        /// </summary>
        /// <param name="redirectUri">Your registered redirect URI. This must exactly match the redirect URI registered in the prior, Registration step.</param>
        /// <param name="scopes">Space-separated list of scopes.</param>
        /// <param name="forceVerify">Specifies whether the user should be re-prompted for authorization. If this is true, the user always is prompted to confirm authorization. This is useful to allow your users to switch Twitch accounts, since there is no way to log users out of the API. Default: false (a given user sees the authorization page for a given set of scopes only the first time through the sequence).</param>
        /// <param name="state">Your unique token, generated by your application. This is an OAuth 2.0 opaque value, used to avoid CSRF attacks. This value is echoed back in the response. We strongly recommend you use this.</param>
        /// <param name="clientId">Your client ID.</param>
        /// <returns>A URL encoded string that can be used to generate a user authorization code.</returns>
        /// <exception cref="BadParameterException">Thrown when any of the required parameters are not valid.</exception>
        public string GetAuthorizationCodeUrl(string redirectUri, IEnumerable<string> scopes, bool forceVerify = false, string state = null, string clientId = null)
        {
            if (string.IsNullOrWhiteSpace(clientId ?? Settings.ClientId))
                throw new BadParameterException("The clientId is not valid. It is not allowed to be null, empty or filled with whitespaces.");

            return $"https://id.twitch.tv/oauth2/authorize?{Helpers.BuildQueryString(new()
            {
                { "client_id", clientId ?? Settings.ClientId },
                { "redirect_uri", HttpUtility.UrlEncode(redirectUri) },
                { "response_type", "code" },
                { "scope", string.Join("+", scopes) },
                { "state", state },
                { "force_verify", $"{forceVerify}" }
            })}";
        }
    }
}
