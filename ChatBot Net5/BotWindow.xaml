<Window x:Class="ChatBot_Net5.BotWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:BotIOController ="clr-namespace:ChatBot_Net5.BotIOController"
        xmlns:s="clr-namespace:ChatBot_Net5.Properties"
        mc:Ignorable="d"
        Title="Chat Bot Manager" Height="600" Width="1100" Closing="OnWindowClosing" SnapsToDevicePixels="True" Loaded="Window_Loaded" UseLayoutRounding="True">
    <Window.Resources>
        <BotIOController:BotController x:Name="ControlBot" x:Key="ControlBot" />
    </Window.Resources>
    <DockPanel SnapsToDevicePixels="True" DataContext="{DynamicResource ControlBot}">
        <StatusBar Height="25" DockPanel.Dock="Bottom" />
        <TabControl>
            <TabItem Header="Bot Setup">
                <TabControl>
                    <TabItem Header="Twitch">
                        <DockPanel LastChildFill="True" Name="DockPanel_BotSetup_Twitch">
                            <StackPanel DockPanel.Dock="Left"  DataContext="{Binding Source={x:Static s:Settings.Default}, Mode=OneWay}">
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Label Content="Channel Name" Width="110" />
                                    <TextBox x:Name="TB_Twitch_Channel" Text="{Binding TwitchChannelName}" Width="250" LostFocus="Settings_LostFocus" SourceUpdated="TextBox_SourceUpdated" />
                                </StackPanel>
                                <TextBlock Width="300" Text="* Currently, this Chat Bot only supports communicating to one channel through the Channel Name." TextWrapping="Wrap" FontSize="8" FontStretch="SemiCondensed" />
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Label Content="Bot User Name" Width="110" />
                                    <TextBox x:Name="TB_Twitch_BotUser" Text="{Binding TwitchBotUserName, Mode=TwoWay}" Width="250" LostFocus="Settings_LostFocus" SourceUpdated="TextBox_SourceUpdated" />
                                </StackPanel>

                                <Expander Name="Expander_Credentials" Header="Credential (Click me)" ExpandDirection="Down" IsExpanded="False">
                                    <StackPanel>
                                        <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                            <Label Content="Client Id" Width="110" />
                                            <TextBox x:Name="TB_Twitch_ClientID" Text="{Binding TwitchClientID, Mode=TwoWay}" Width="250" ToolTip="The client ID for the bot user account."  LostFocus="Settings_LostFocus" SourceUpdated="TextBox_SourceUpdated" InputScope="Password" />
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                            <Label Content="Access Token" Width="110" />
                                            <TextBox x:Name="TB_Twitch_AccessToken" Text="{Binding TwitchAccessToken, Mode=TwoWay}" Width="250" LostFocus="Settings_LostFocus" SourceUpdated="TextBox_SourceUpdated" InputScope="Password" />
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                            <Label Content="Refresh Token" Width="110" />
                                            <TextBox x:Name="TB_Twitch_RefreshToken" Text="{Binding TwitchRefreshToken, Mode=TwoWay}" Width="250" LostFocus="Settings_LostFocus" />
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                            <Button x:Name="Btn_Twitch_RefreshDate" Content="Refresh Due Date" Width="110" ToolTip="Click this button to set a 60 day due date from today, to show when the 'access token' needs refreshed." Click="Button_Click" LostFocus="Settings_LostFocus" />
                                            <Label Name="Twitch_RefreshDate" Content="{Binding TwitchRefreshDate, FallbackValue=1/1/1900, Mode=TwoWay, StringFormat=MM/dd/yyyy}" Width="200" />
                                        </StackPanel>
                                    </StackPanel>
                                </Expander>
                            </StackPanel>

                            <StackPanel DockPanel.Dock="Left">
                                <StackPanel DataContext="{Binding Source={x:Static s:Settings.Default}, Mode=OneWay}">
                                    <StackPanel Orientation="Horizontal">
                                        <Label Content="Seconds between checking the channel: " />
                                        <Label Content="{Binding Value, ElementName=Slider_TimePollSeconds}" />
                                    </StackPanel>

                                    <Slider x:Name="Slider_TimePollSeconds" Height="40" Width="300" AutoToolTipPlacement="TopLeft" Interval="1" TickPlacement="Both" ToolTip="Choose how often, in seconds, to check for new activity in the channel. Smaller values increases traffic to your channel." Value="{Binding TwitchFrequency, Mode=TwoWay}" Maximum="60" Minimum="1" SmallChange="1" SelectionStart="1" SelectionEnd="60" Margin="10,0" IsSnapToTickEnabled="True" LostFocus="Settings_LostFocus" />

                                    <CheckBox IsChecked="{Binding BotConnectionMsg, Mode=TwoWay}" LostFocus="Settings_LostFocus">
                                        <TextBlock Padding="5" TextWrapping="Wrap">Enable chat message when bot connects to a channel.</TextBlock>
                                    </CheckBox>
                                </StackPanel>
                                <GroupBox x:Name="BC_T_groupBox" Header="Bot Processing" Margin="0,10,0,0" Height="100" Width="150" BorderBrush="#FF212D34">
                                    <StackPanel Orientation="Vertical">
                                        <RadioButton x:Name="Radio_Twitch_StartBot" Content="Start Bot" Margin="10,10,0,5" PreviewMouseDown="BC_Twitch_StartBot" IsEnabled="False"  />
                                        <RadioButton x:Name="Radio_Twitch_StopBot" Content="Stop Bot" Margin="10,10,0,5" PreviewMouseDown="BC_Twitch_StopBot" IsChecked="True" IsEnabled="False" />
                                    </StackPanel>
                                </GroupBox>
                            </StackPanel>

                            <StackPanel DockPanel.Dock="Right">
                                <ScrollViewer x:Name="Info_Scroller" VerticalContentAlignment="Stretch" Margin="0,0,0,20" HorizontalContentAlignment="Stretch" HorizontalScrollBarVisibility="Disabled">

                                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,20" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True">
                                            Bots need an "Access Token" to authorize it to post to Twitch. Per the OAuth requirements, the "Access Token" must be paired with the "Client Id" used to generate the "Access Token". <LineBreak/><LineBreak/>
                                            *Until this application supports creating and refreshing access tokens, the user will need to manually perform this task.<LineBreak/><LineBreak/>
                                            *The 'Credentials' are in the expander to the left for privacy when the bot starts. Click to expand to enter and view the credentials.<LineBreak/><LineBreak/>
                                             The data is saved after the textbox, slider, or checkbox loses focus. <LineBreak/>
                                            <LineBreak />
                                        
                                            1) *The recommendation is to create a separate Twitch account for this bot to use.<LineBreak /><LineBreak />
                                            2) Visit: <Hyperlink NavigateUri="https://dev.twitch.tv/console" RequestNavigate="Hyperlink_RequestNavigate" >https://dev.twitch.tv/console</Hyperlink> and "Register Your Application". *Note, the Twitch account needs 2-factor authentication set-up to register applications.* <LineBreak />
                                            a) Give the application a name (it's just a reference when you look at the listing). <LineBreak />
                                            b) Add: "https://twitchapps.com/tokengen/" as the OAuth Redirect URLs. Select "Chat Bot" category. <LineBreak />
                                            c) Complete the reCaptcha and click 'Create'.<LineBreak />
                                            d) View the application entry to get the 'Client Id'. You can save it in your files and add to the box on the left.<LineBreak /><LineBreak />
                                            3) One such site to generate the access tokens is at: <LineBreak />
                                            <Hyperlink NavigateUri="https://twitchapps.com/tokengen/" RequestNavigate="Hyperlink_RequestNavigate" >https://twitchapps.com/tokengen/</Hyperlink>
                                            <LineBreak /><LineBreak />
                                            a) Paste the 'Client Id'.<LineBreak />
                                            b) For "Scopes", paste exactly "bits:read chat:read chat:edit channel:moderate user:read:broadcast user:edit:follows". *This permits specific access for the app functions, which the app may later be updated to not perform certain actions you don't want to enable and therefore these scopes are unnecessary.<LineBreak />
                                            c) Click 'Connect' and copy the resulting "Access Token". You can save it to your local files and paste it to the left in the box. <LineBreak />
                                            d) Be sure to click "Refresh Date" here in the credentials which will give you the 60-day date from now in which you need to refresh the 'access token'. You would only need to perform step 3 for a new 'access token'.<LineBreak /><LineBreak />
                                            4) View the other tabs to setup your bot messages to events and commands. <LineBreak /><LineBreak />
                                        </TextBlock>

                                    </ScrollViewer> 
                            </StackPanel>
                        </DockPanel>
                    </TabItem>
                    <TabItem Header="Discord" DataContext="{Binding DataManage}">
                        <StackPanel>
                            <TextBlock IsEnabled="False">Add Webhook links, one per line. Bot will report notifications to each Webhook. *The incorrect 'Kind' will prevent the notification.<LineBreak />
                              Current implemented <LineBreak /> 'Kind':
                            </TextBlock>
                            <StackPanel Orientation="Horizontal">
                                <ListView ItemsSource="{Binding KindsWebhooks, Mode=OneWay}" SelectionMode="Single"  />
                                <DataGrid Name="DG_Webhooks" Height="200" Margin="10,0" AutoGenerateColumns="True" d:LayoutOverrides="LeftMargin, RightMargin" ItemsSource="{Binding Discord, Mode=OneWay}"/>
                            </StackPanel>
                        </StackPanel>
                    </TabItem>
                    <TabItem Header="Bot Status Log">
                        <GroupBox Header="Bot Status Log" BorderBrush="Black" Margin="2,2,2,2">
                            <TextBox x:Name="TextBlock_TwitchBotLog" DataContext="{Binding TwitchIO}" Text="{Binding StatusLog, Mode=OneWay}" TextWrapping="Wrap" Background="#FFEEEEEE" ScrollViewer.VerticalScrollBarVisibility="Auto" IsReadOnly="True" VerticalScrollBarVisibility="Visible" IsInactiveSelectionHighlightEnabled="True" TextChanged="TextBlock_TwitchBotLog_TextChanged" />
                        </GroupBox>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Data &amp; Messages">
                <TabControl x:Name="TabControl_DataTabs">
                    <TabItem Header="Users" Name="TabItem_Users">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="25" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Label Content="This tab is disabled while the bot is started. Stop the bot to access this tab." Grid.Row="0" />
                            <DataGrid x:Name="DG_Users" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Users, Mode=OneWay}" AutoGenerateColumns="True" AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" CanUserAddRows="False" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" Grid.Row="1" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Followers" Name="TabItem_Followers">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="25" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Label Content="This tab is disabled while the bot is started. Stop the bot to access this tab." Grid.Row="0" />
                            <DataGrid x:Name="DG_Followers" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Followers, Mode=OneWay}" AutoGenerateColumns="True"  AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" Grid.Row="1" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Command Options">
                        <ListView DockPanel.Dock="Right" ItemsSource="{Binding CommandInfo.Collection}" >
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn DisplayMemberBinding="{Binding Parameter}" Header="Parameter" />
                                    <GridViewColumn DisplayMemberBinding="{Binding Value}" Header="Value"/>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </TabItem>
                    <TabItem Header="System Events">
                        <Grid>
                            <DataGrid x:Name="DG_CommonMsgs" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding ChannelEvents, Mode=OneWay}"  AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" DockPanel.Dock="Bottom" CanUserAddRows="False" CanUserDeleteRows="False" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True">
                                <DataGrid.ToolTip>
                                    <TextBlock TextWrapping="Wrap" Width="500">The name column is readonly. These are for channel events the bot recognizes and responds with the specified message. 
                                    <LineBreak /><LineBreak />         
                                    You can edit the message to customize a response fitting your channel!
                                    <LineBreak />
                                    Please see the parameters to the right to use in each message, not all will be applicable. Ensure a space before  the parameter, e.g. "the #user followed", the " #" needs to be the first character in the word.
                                    </TextBlock>
                                </DataGrid.ToolTip>
                            </DataGrid>
                        </Grid>
                    </TabItem>
                    <TabItem Header="Currency">
                        <Grid>
                            <DataGrid Name="DG_Currency" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Currency, Mode=OneWay}" AutoGenerateColumns="True" AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Currency Accrual" Name="TabItem_CurrencyAccrual">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="25" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Label Content="This tab is disabled while the bot is started. Stop the bot to access this tab." Grid.Row="0" />
                            <DataGrid Name="DG_CurrencyAccrual" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding CurrencyAccrued, Mode=OneWay}" AutoGenerateColumns="True" AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" Grid.Row="1" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Built-In Commands">
                        <Grid>
                            <DataGrid IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Commands, Mode=OneWay}" AutoGenerateColumns="True" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Commands">
                        <Grid>
                            <DataGrid IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Commands, Mode=OneWay}" AutoGenerateColumns="True" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Bot Chat">
                <DockPanel>
                    <DockPanel LastChildFill="True" DockPanel.Dock="Right" >
                        <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom" Margin="5" HorizontalAlignment="Center">
                            <Button Padding="10,4" Margin="10" Content="Pop-Out Chat Box" Click="PopOutChatButton_Click" />
                            <GroupBox Header="Pop-out Opacity" Margin="5,0">
                                <Slider x:Name="Slider_PopOut_Opacity" Width="150" TickPlacement="Both" IsSnapToTickEnabled="True" />
                            </GroupBox>
                        </StackPanel>
                        <StackPanel>
                            <Label Content="Join List" HorizontalContentAlignment="Center" />
                            <DataGrid x:Name="DG_JoinList" AutoGenerateColumns="False" 
                            ItemsSource="{Binding JoinCollection}" 
                            VerticalContentAlignment="Stretch" 
                            MaxWidth="290" >
                                <DataGrid.Columns>
                                    <DataGridCheckBoxColumn Binding="{Binding Remove}">
                                        <DataGridCheckBoxColumn.Header>
                                            <TextBlock Text="Remove" ToolTip="The user to remove out of the list. Bot checks regularly." />
                                        </DataGridCheckBoxColumn.Header>
                                    </DataGridCheckBoxColumn>
                                    <DataGridTextColumn Header="GameTag UserName" Binding="{Binding GameUserName}" Width="150"/>
                                    <DataGridTextColumn Header="Chat User" Binding="{Binding ChatUser}" Width="150" />
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>
                    </DockPanel>

                    <TabControl DockPanel.Dock="Left">
                        <!--<TabItem Header="All"/>-->
                        <TabItem Header="Twitch" SnapsToDevicePixels="False">
                            <DockPanel LastChildFill="True">
                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom">
                                    <TextBox Width="595" />
                                    <Button Content="Send" Margin="10,0,0,0" Padding="8,2" />
                                </StackPanel>

                                <RichTextBox x:Name="RichTextBox_ChatBox" DockPanel.Dock="Top" SnapsToDevicePixels="True" IsUndoEnabled="False" IsReadOnly="True" ScrollViewer.CanContentScroll="True" DataContext="{Binding ChatData, Mode=OneWay}" DataContextChanged="RichTextBox_ChatBox_DataContextChanged"  />
                            </DockPanel>

                        </TabItem>
                    </TabControl>

                </DockPanel>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>
