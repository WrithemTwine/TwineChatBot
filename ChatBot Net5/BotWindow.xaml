<Window x:Class="ChatBot_Net5.BotWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:BotIOController ="clr-namespace:ChatBot_Net5.BotIOController"
        mc:Ignorable="d"
        Title="Chat Bot Manager" Height="600" Width="1100" Closing="OnWindowClosing" SnapsToDevicePixels="True" Loaded="Window_Loaded" UseLayoutRounding="True">
    <Window.Resources>
        <BotIOController:BotController x:Name="ControlBot" x:Key="ControlBot" />
    </Window.Resources>
    <DockPanel SnapsToDevicePixels="True" DataContext="{DynamicResource ControlBot}">
        <StatusBar Height="25" DockPanel.Dock="Bottom" />
        <TabControl>
            <TabItem Header="Bot Setup">
                <TabControl>
                    <TabItem Header="Twitch">
                        <WrapPanel Margin="10">
                            <StackPanel DataContext="{Binding TwitchIO, Mode=OneWay}">
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Label Content="Channel Name" Width="110" />
                                    <TextBox x:Name="TB_Twitch_Channel" Text="{Binding ChannelName, Mode=TwoWay}" Width="250" LostFocus="TextBox_LostFocus" SourceUpdated="TextBox_SourceUpdated" />
                                </StackPanel>
                                <TextBlock Width="300" Text="* Currently, this Chat Bot only supports communicating to one channel through the Channel Name." TextWrapping="Wrap" FontSize="8" FontStretch="SemiCondensed" />
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Label Content="Bot User Name" Width="110" />
                                    <TextBox x:Name="TB_Twitch_BotUser" Text="{Binding BotUserName, Mode=TwoWay}" Width="250" LostFocus="TextBox_LostFocus" SourceUpdated="TextBox_SourceUpdated" />
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Label Content="Client Id" Width="110" />
                                    <TextBox x:Name="TB_Twitch_ClientID" Text="{Binding ClientID, Mode=TwoWay}" Width="250" ToolTip="The client ID for the bot user account."  LostFocus="TextBox_LostFocus" SourceUpdated="TextBox_SourceUpdated" />
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Label Content="Access Token" Width="110" />
                                    <TextBox x:Name="TB_Twitch_AccessToken" Text="{Binding AccessToken, Mode=TwoWay}" Width="250"  LostFocus="TextBox_LostFocus" SourceUpdated="TextBox_SourceUpdated" />
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Label Content="Refresh Token" Width="110" />
                                    <TextBox x:Name="TB_Twitch_RefreshToken" Text="{Binding RefreshToken, Mode=TwoWay}" Width="250" />
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" Height="25" Margin="10">
                                    <Button x:Name="Btn_Twitch_RefreshDate" Content="Refresh Due Date" Width="110" ToolTip="Click this button to set a 60 day due date from today, to show when the 'access token' needs refreshed." Click="Button_Click" />
                                    <Label Name="Twitch_RefreshDate" Content="{Binding RefreshDate, FallbackValue=1/1/1900, Mode=TwoWay, StringFormat=MM/dd/yyyy}" Width="200" />
                                </StackPanel>
                            </StackPanel>
                            <StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <Label Content="Seconds between checking the channel: " />
                                    <Label Content="{Binding Value, ElementName=Slider_TimePollSeconds}" />
                                </StackPanel>

                                <Slider DataContext="{Binding TwitchIO, Mode=OneWay}" x:Name="Slider_TimePollSeconds" Height="40" Width="300" AutoToolTipPlacement="TopLeft" Interval="1" TickPlacement="Both" ToolTip="Choose how often, in seconds, to check for new activity in the channel. Smaller values increases traffic to your channel." Value="{Binding FrequencyTime, Mode=TwoWay}" Maximum="60" Minimum="1" SmallChange="1" SelectionStart="1" SelectionEnd="60" Margin="10,0" IsSnapToTickEnabled="True" />
                                <GroupBox x:Name="BC_T_groupBox" Header="Bot Processing" Margin="0,30,0,0" Height="100" Width="150" BorderBrush="#FF212D34">
                                    <StackPanel Orientation="Vertical">
                                        <RadioButton x:Name="Radio_Twitch_StartBot" Content="Start Bot" Margin="10,10,0,5" PreviewMouseDown="BC_Twitch_StartBot" IsEnabled="False"  />
                                        <RadioButton x:Name="Radio_Twitch_StopBot" Content="Stop Bot" Margin="10,10,0,5" PreviewMouseDown="BC_Twitch_StopBot" IsChecked="True" IsEnabled="False" />
                                    </StackPanel>
                                </GroupBox>
                            </StackPanel>

                            <StackPanel Orientation="Vertical" Visibility="Hidden" >
                                <StackPanel>
                                    <TextBlock Margin="20,0" TextWrapping="Wrap">
                                    
                                        To use this bot, the user needs to enter an "Access Token" to authorize it to post to Twitch. Per the OAuth requirements, the "Access Token" must be paired with the "Client Id" used to generate the "Access Token". The data isn't saved until the "Start Bot" is clicked.
                                        <LineBreak /><LineBreak />
                                        One such site to generate these tokens is at: 
                                        <Hyperlink NavigateUri="https://twitchtokengenerator.com" RequestNavigate="Hyperlink_RequestNavigate" >https://twitchtokengenerator.com/</Hyperlink>
                                        <LineBreak />
                                        Use the site, connect it to a Twitch account (possibly a bot account), and the site will generate an access token and a 'refresh token'. The 'refresh token' is used within every 60 days to generate a new 'access token', provided by the above date given; calculated as 60 days from today's date. 
                                        <LineBreak />*Be sure to stop the bot, apply the refreshed 'access token', and start the bot again.*
                                    </TextBlock>
                                </StackPanel>
                            </StackPanel>
                        </WrapPanel>
                    </TabItem>
                    <TabItem Header="Discord">
                        <StackPanel>
                            <Label>Add Webhook links, one per line. Bot will report Live notifications to each Webhook.</Label>
                            <DataGrid Name="DG_Webhooks" Height="200" Margin="10,0" DataContext="{Binding DataManage}" AutoGenerateColumns="True" d:LayoutOverrides="LeftMargin, RightMargin" ItemsSource="{Binding Discord, Mode=OneWay}"/>
                        </StackPanel>
                    </TabItem>
                    <TabItem Header="Bot Status Log">
                        <GroupBox Header="Bot Status Log" BorderBrush="Black" Margin="2,2,2,2">
                            <TextBox x:Name="TextBlock_TwitchBotLog" DataContext="{Binding TwitchIO}" Text="{Binding StatusLog, Mode=OneWay}" TextWrapping="Wrap" Background="#FFEEEEEE" ScrollViewer.VerticalScrollBarVisibility="Auto" IsReadOnly="True" VerticalScrollBarVisibility="Visible" IsInactiveSelectionHighlightEnabled="True" TextChanged="TextBlock_TwitchBotLog_TextChanged" />
                        </GroupBox>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Data &amp; Messages">
                <TabControl>
                    <TabItem Header="Command Options">
                        <ListView DockPanel.Dock="Right" ItemsSource="{Binding CommandInfo.Collection}" >
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn DisplayMemberBinding="{Binding Parameter}" Header="Parameter" />
                                    <GridViewColumn DisplayMemberBinding="{Binding Value}" Header="Value"/>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </TabItem>
                    <TabItem Header="System Events">
                        <Grid>
                            <DataGrid x:Name="DG_CommonMsgs" IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding ChannelEvents, Mode=OneWay}"  AutoGeneratedColumns="DG_CommonMsgs_AutoGeneratedColumns" DockPanel.Dock="Bottom" CanUserAddRows="False" CanUserDeleteRows="False" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True">
                                <DataGrid.ToolTip>
                                    <TextBlock TextWrapping="Wrap" Width="500">The name column is readonly. These are for channel events the bot recognizes and responds with the specified message. 
                                    <LineBreak /><LineBreak />         
                                    You can edit the message to customize a response fitting your channel!
                                    <LineBreak />
                                    Please see the parameters to the right to use in each message, not all will be applicable. Ensure a space before and after the parameter, e.g. "the #user followed".
                                    </TextBlock>
                                </DataGrid.ToolTip>
                            </DataGrid> 
                        </Grid>
                    </TabItem>
                    <TabItem Header="Users">
                        <Grid>
                            <DataGrid IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Users, Mode=OneWay}" AutoGenerateColumns="True" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Followers">
                        <Grid>
                            <DataGrid IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Followers, Mode=OneWay}" AutoGenerateColumns="True" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Currency">
                        <Grid>
                            <DataGrid IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Currency, Mode=OneWay}" AutoGenerateColumns="True" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Currency Accrual">
                        <Grid>
                            <DataGrid IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding CurrencyAccrued, Mode=OneWay}" AutoGenerateColumns="True" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                    <TabItem Header="Commands">
                        <Grid>
                            <DataGrid IsSynchronizedWithCurrentItem="True" DataContext="{Binding DataManage}" ItemsSource="{Binding Commands, Mode=OneWay}" AutoGenerateColumns="True" CanUserAddRows="False" CanUserDeleteRows="True" AlternationCount="1" AlternatingRowBackground="#FFDBFFF4" ScrollViewer.CanContentScroll="True" />
                        </Grid>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Bot Chat">
                <DockPanel>
                    <DockPanel LastChildFill="True" DockPanel.Dock="Right" >
                        <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom" Margin="5" HorizontalAlignment="Center">
                            <Button Padding="10,4" Margin="10" Content="Pop-Out Chat Box" Click="PopOutChatButton_Click" />
                            <GroupBox Header="Pop-out Opacity" Margin="5,0">
                                <Slider x:Name="Slider_PopOut_Opacity" Width="150" TickPlacement="Both" IsSnapToTickEnabled="True" />
                            </GroupBox>
                        </StackPanel>
                        <StackPanel>
                            <Label Content="Join List" HorizontalContentAlignment="Center" />
                            <DataGrid x:Name="DG_JoinList" AutoGenerateColumns="False" 
                            ItemsSource="{Binding JoinCollection}" 
                            VerticalContentAlignment="Stretch" 
                            MaxWidth="290" >
                                <DataGrid.Columns>
                                    <DataGridCheckBoxColumn Binding="{Binding Remove}">
                                        <DataGridCheckBoxColumn.Header>
                                            <TextBlock Text="Remove" ToolTip="The user to remove out of the list. Bot checks regularly." />
                                        </DataGridCheckBoxColumn.Header>
                                    </DataGridCheckBoxColumn>
                                    <DataGridTextColumn Header="GameTag UserName" Binding="{Binding GameUserName}" Width="150"/>
                                    <DataGridTextColumn Header="Chat User" Binding="{Binding ChatUser}" Width="150" />
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>
                    </DockPanel>

                    <TabControl DockPanel.Dock="Left">
                        <!--<TabItem Header="All"/>-->
                        <TabItem Header="Twitch" SnapsToDevicePixels="False">
                            <DockPanel LastChildFill="True">
                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Bottom">
                                    <TextBox Width="595" />
                                    <Button Content="Send" Margin="10,0,0,0" Padding="8,2" />
                                </StackPanel>

                                <RichTextBox x:Name="RichTextBox_ChatBox" DockPanel.Dock="Top" SnapsToDevicePixels="True" IsUndoEnabled="False" IsReadOnly="True" ScrollViewer.CanContentScroll="True" DataContext="{Binding ChatData, Mode=OneWay}" DataContextChanged="RichTextBox_ChatBox_DataContextChanged"  />
                            </DockPanel>

                        </TabItem>
                    </TabControl>

                </DockPanel>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>
